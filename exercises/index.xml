<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exercises on Dr. CS codes</title><link>https://DrCS.codes/exercises/</link><description>Recent content in Exercises on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/exercises/index.xml" rel="self" type="application/rss+xml"/><item><title>Books XML Exercise</title><link>https://DrCS.codes/exercises/python/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/books/</guid><description>Books Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing XML files, and using Python data structures.
Problem Description You&amp;rsquo;re developing a book selling web site. You receive book data in XML format, like books.xml, and produce various reports about the books you sell.
Solution Description Write a module called books.py with the following functions:
def titles(books): &amp;#34;&amp;#34;&amp;#34;Extract the titles the books XML node and return them in a list.</description></item><item><title>Company Scraper</title><link>https://DrCS.codes/exercises/python/company-scraper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/company-scraper/</guid><description>Company Scraper Introduction In this exercise you will practice
web scraping, and writing CSV files. Problem Description You need to process general information about many different companies from many different sectors. The only place you can consitently find this information is on the web.
Solution Description Write a module called company_scraper.py that scrapes data from SEC.gov&amp;rsquo;s Edgar search engine to extract the name and address of each company in a list of companies contained in a text file, and saves the data in a single CSV file.</description></item><item><title>Data Util Module</title><link>https://DrCS.codes/exercises/python/data-util/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/data-util/</guid><description>data_util Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings and data structures, testing modules with doctest. Problem Description You need to manipulate Python data (and you&amp;rsquo;re not familiar with Python&amp;rsquo;s standard library).
Solution Description Create a module named data_util that implements the functions described below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>Dates</title><link>https://DrCS.codes/exercises/python/dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/dates/</guid><description>Dates Introduction In this assignment you will practice:
writing functions, documenting functions, doing basic operations with values and variables, and dealing with date-related data. Problem Description Solution Description Write a module called dates (which you should save in a file called dates.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.6, Chapter 3 and summarized in our slides on Python functions, including the type contract using type hints and a docstring.</description></item><item><title>Dog Module</title><link>https://DrCS.codes/exercises/python/dog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/dog/</guid><description>Dog Module Write a module named dog which has a class named Dog with
an instance variable named name an instance variable named breed a constructor/initializer that takes name and breed parameters and uses them to initialize the instance variables a string representation that prints the name and breed of the dog, e.g., 'Chloe the Doberman' When your dog module is run as a script, it should use the first two command line arguments to your script to pass as the name and breed in the construction of an instance of Dog, then print the Dog instance using the print function.</description></item><item><title>Drill - Values and Variables</title><link>https://DrCS.codes/exercises/python/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/values-variables/</guid><description>Drill - Values and Variables Introduction Drills are very short exercises designed to exercise the most basic building blocks of modules and programs. In this drill you will create a series of values and assign them to variables to solidify your knowledge of values, variables, operators, and types.
Solution Description For each of the comments below, write the specified Python code. You may do this in the Python interactive shell or by creating a text file that you run from the command line or import into an interactive Python shell (which runs the code).</description></item><item><title>Email Utilities</title><link>https://DrCS.codes/exercises/python/email-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/email-utils/</guid><description>Email Utilites In this exercise you will practice:
string manipulation, string methods, simple boolean expressions, and writing functions. Introduction Emails are of the form @. For example, bob@aol.com means there is a bob user account on the aol.com server. Email address are case insensitive, so Liger@SweetAnimals.com is the same as liger@sweetanimals.com. (This is a bit of a simplification, but fits our purpose here.)
Problem Description You need to extract user names and server names from email addresses, and compare two emails to determine if they are the same.</description></item><item><title>Grades Module Exercise</title><link>https://DrCS.codes/exercises/python/grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/grades/</guid><description>Grades Module Introduction In this exercise you will practice
writing functions, using control structures, and manipulating data structures. Problem Description You need to process grades given as a list of lists, list[list[str]], where the first list is a header, and subsequent lists have a name followed by grades. For example:
super_grades = [ # First line is descriptive header. Subsequent lines hold data [&amp;#39;Student&amp;#39;, &amp;#39;Exam 1&amp;#39;, &amp;#39;Exam 2&amp;#39;, &amp;#39;Exam 3&amp;#39;], [&amp;#39;Thorny&amp;#39;, &amp;#39;100&amp;#39;, &amp;#39;90&amp;#39;, &amp;#39;80&amp;#39;], [&amp;#39;Mac&amp;#39;, &amp;#39;88&amp;#39;, &amp;#39;99&amp;#39;, &amp;#39;111&amp;#39;], [&amp;#39;Farva&amp;#39;, &amp;#39;45&amp;#39;, &amp;#39;56&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Rabbit&amp;#39;, &amp;#39;59&amp;#39;, &amp;#39;61&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Ursula&amp;#39;, &amp;#39;73&amp;#39;, &amp;#39;79&amp;#39;, &amp;#39;83&amp;#39;], [&amp;#39;Foster&amp;#39;, &amp;#39;89&amp;#39;, &amp;#39;97&amp;#39;, &amp;#39;101&amp;#39;] ] Write a module named grades with the following functions:</description></item><item><title>Grades Report Exercise</title><link>https://DrCS.codes/exercises/python/calc-grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/calc-grades/</guid><description>Calc Grades Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to calculate final grades and get summary information on students in a class.
Solution Description Write a program called calc_grades.py that reads student item scores from a CSV file such as super-grades.csv, writes a new CSV file with the same data as the input file with the following additional columns:</description></item><item><title>Hangman Exercise</title><link>https://DrCS.codes/exercises/python/hangman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/hangman/</guid><description>Hangman Exercise Introduction In this exercise you will practice
writing Python programs and modules, writing programs and modules that use other modules, using control structures, validating user input and dealing with invalid input, using data structures and string processing, and writing interactive console programs. Problem Description You like word-guessing games.
Solution Description Write a Python program in a file named hangman.py that implements the classic Hangman game. Game play proceeds as follows:</description></item><item><title>Homework 0</title><link>https://DrCS.codes/exercises/python/hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/hw0/</guid><description>Homework 0 Introduction This assignment gets you started with the basic tools you will need to complete all of your homework projects. This project will
ensure that you have correctly installed Python 3 give you practice using a text editor to write Python programs, and give you practice running Python programs and using command line features. Problem Description You are a student who needs to install Python, configure it for command line use, and learn how to use a programmer&amp;rsquo;s text editor to create and edit Python source code.</description></item><item><title>Student Emails</title><link>https://DrCS.codes/exercises/python/student-emails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/student-emails/</guid><description>Student Emails Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to extract all the student emails from a CSV class roster downloaded from T-Square.
Solution Description Write a program that reads a CSV student roster file such as super-roster.csv and prints the email addresses to the console.
Sample Output $ python student_emails.</description></item><item><title>Tides Exercise</title><link>https://DrCS.codes/exercises/python/tides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/tides/</guid><description>Tides Introduction In this assignment you will practice writing Python command-line utilities, obtaining data, file I/O, processing CSV files, and using Python&amp;rsquo;s date/time libraries.
Problem Description You are a scuba diving instructor who plans dive trips to West Palm Beach, FL that include dives at the world famous Blue Heron Bridge. The Blue Heron Bridge is a shore dive that is best done at slack high tide, so planning is essential.</description></item><item><title>Treating People as Objects</title><link>https://DrCS.codes/exercises/python/people-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/exercises/python/people-objects/</guid><description>Exercise: Treating People as Objects Introduction In this exercise you will practice defining and using classes, and performing simple manipulations of collections of objects.
Problem Description You need to view some data about people in various ways.
Solution Description The people.py module has starter code that creates Person objects in a list peeps. In the people.py file:
Write a Person class with:
an __init__ method that takes: a name (str), a birthdate (str) formatted in ISO 8601 format, a height in cm (int), a weight in kilograms (float), a __repr__ method that returns a str like &amp;lt;name, birthdate, height, weight&amp;gt; field, e.</description></item></channel></rss>