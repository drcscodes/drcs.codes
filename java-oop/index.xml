<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java-oops on Dr. CS codes</title><link>https://DrCS.codes/java-oop/</link><description>Recent content in Java-oops on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/java-oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Classes</title><link>https://DrCS.codes/java-oop/slides/classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/classes/</guid><description>Classes Classes Classes
Anatomy of a Class By the end of next lecture, you&amp;#39;ll understand everything in this class definition.
package edu.gatech.cs1331.card; import java.util.Arrays; public class Card { public static final String[] VALID_RANKS = {&amp;#34;2&amp;#34;, ... , &amp;#34;ace&amp;#34;}; public static final String[] VALID_SUITS = {&amp;#34;diamonds&amp;#34;, ... }; private String rank; private String suit; public Card(String aRank, String aSuit) { // ... } public String toString() { return rank + &amp;#34; of &amp;#34; + suit; } private boolean isValidRank(String someRank) { .</description></item><item><title>Collections Algorithms</title><link>https://DrCS.codes/java-oop/slides/collections-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/collections-algorithms/</guid><description>Collections Algorithms The Collections Framework A collection is an object that represents a group of objects. The collections framework allows different kinds of collections to be dealt with in an implementation-independent manner. Collections.sort(List&amp;lt;T&amp;gt; list) The collections framework includes algorithms that operate on collections. These algorithms are implemented as static methods of the Collections class. A good example is the (overloaded) sort method:
public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; void sort(List&amp;lt;T&amp;gt; list) This method signature demonstrates how to declare a generic method (so far we&amp;#39;ve seen only generic classs): put a type parameter before the return type.</description></item><item><title>Control Structures</title><link>https://DrCS.codes/java-oop/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/control-structures/</guid><description>Control Structures Control Flow Issues Multiple vs. single entry (&amp;#34;How did we get here?&amp;#34;) Multiple vs. single exit (&amp;#34;Where do we go from here?&amp;#34;) goto considered harmful (goto makes it hard to answer questions above) Structured Programming All algorithms expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Iteration - loops No goto
Boolean Values Four kinds of boolean expressions:
boolean literals: true and false boolean variables expressions formed by combining non-boolean expressions with comparison operators expressions formed by combining boolean expressions with logical operators Comparison Expressions Equal to: ==, like $=$ in math</description></item><item><title>Inheritance</title><link>https://DrCS.codes/java-oop/slides/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/inheritance/</guid><description>Inheritance Programming in the large Software is complex. Three ways we deal with complexity:
Abstraction - boiling a concept down to its essential elements, ignoring irrelevant details Decomposition - decompose system into packages, classes, functions Reuse - reuse library function in many diferent places Today we introduce another kind of resuse: inheritance
What is inheritance? What is inheritance? More like genetics …
… but a programming concept that, like so much in CS, borrows a term from another field to leverage our intuition.</description></item><item><title>Introduction to Java</title><link>https://DrCS.codes/java-oop/slides/intro-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/intro-java/</guid><description>Introduction to Java Java Developed for home appliances - cross-platform VM a key feature Originally called Oak Gained notariety with HotJava web browser that could run ``programs over the internet&amp;#39;&amp;#39; called applets Gained popularity when Netscape included Java VM in Navigator web browser JavaScript is purely a marketing label meant to capitalize on Java hype - there is no relationship between Java and JavaScript Java is a general-purpose application programming language.</description></item><item><title>Polymorphism</title><link>https://DrCS.codes/java-oop/slides/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/polymorphism/</guid><description>Polymorphism Introduction to Object-Oriented Programming Today we&amp;#39;ll learn how to combine all the elements of object-oriented programming in the design of a program that handles a company payroll. Object-oriented programming requires three features:
Data abstraction with classes (encapsulation) Inheritance Dynamic method binding That last part, dynamic method binding, provides for subtype polymorphism, which we&amp;#39;ll learn today.
Class Hierarchies UML class hierarchies depict the superclass-subclass relationships between families of related classes.</description></item><item><title>Programs and Methods</title><link>https://DrCS.codes/java-oop/slides/programs-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/programs-methods/</guid><description>Programs and Methods The Anatomy of a Java Program public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;#34;Hello, world!&amp;#34;); } } First line declares HelloWorld class. class is the syntax for declaring a class, and prepending with the public modifer means the class will be visible outside HelloWorld&amp;#39;s package. The code between the curly braces, { … } define the contents of the HelloWorld class, in this case a single method, main The main Method In order to make a class executable with the java command, it must have a main method:</description></item><item><title>Streams</title><link>https://DrCS.codes/java-oop/slides/streams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/streams/</guid><description>Streams Streams and Pipelines A stream is a sequence of elements.
Unlike a collection, it is not a data structure that stores elements. Unlike an iterator, streams do not allow modification of the underlying source A stream carries values from a source through a pipeline.
A pipeline contains the following components:
A source: This could be a collection, an array, a generator function, or an I/O channel. Zero or more intermediate operations.</description></item><item><title>The Object Superclass</title><link>https://DrCS.codes/java-oop/slides/object-superclass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/object-superclass/</guid><description>The Object Superclass Fitting Classes Into the Java Hierarchy java.lang.Object defines several methods that are designed to be overriden in subclasses (JLS § 4.3.2:)
The method equals(Object) defines a notion of object equality, which is based on value, not reference, comparison. The method hashCode is very used together with equals(Object) in hashtables such as java.util.Hashmap. The method toString returns a String representation of the object. The method clone is used to make a duplicate of an object (don&amp;#39;t touch).</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/java-oop/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/values-variables/</guid><description>Values and Variables Values Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item></channel></rss>