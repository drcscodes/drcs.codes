<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dr. CS codes</title><link>http://DrCS.codes/</link><description>Recent content on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://DrCS.codes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://DrCS.codes/intensive-python/slides/intro-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/intro-python/</guid><description>% Introduction to Computing with Python
Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
&amp;ndash; Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>2021 Schedule</title><link>http://DrCS.codes/intensive-python/msabc2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/msabc2021/</guid><description>Lessons PfP means Python for Programmers TP means Think Python, 2nd Edition, by Allen B. Downey Session Topic Resources Monday, 2021-08-16, 13:30 - 17:00
1 Introduction to Intensive Python Meet the Teacher
Video: Getting Started on macOS
Video: Getting Started on Windows/WSL2
2 Intro to Python Reading: TP 1
Video: Intro to Python
3 Values and Variables Reading: PfP</description></item><item><title>Books XML Exercise</title><link>http://DrCS.codes/intensive-python/exercises/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/books/</guid><description>Books Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing XML files, and using Python data structures.
Problem Description You&amp;rsquo;re developing a book selling web site. You receive book data in XML format, like books.xml, and produce various reports about the books you sell.
Solution Description Write a module called books.py with the following functions:
def titles(books): &amp;#34;&amp;#34;&amp;#34;Extract the titles the books XML node and return them in a list.</description></item><item><title>Classes and Objects</title><link>http://DrCS.codes/intensive-python/slides/classes-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/classes-objects/</guid><description>Classes and Objects ** Python is Object-Oriented
Every value in Python is an object, meaning an instance of a class. Even values that are considered &amp;ldquo;primitive&amp;rdquo; in some other languages.
#+BEGIN_SRC python
type(1) &amp;lt;class &amp;lsquo;int&amp;rsquo;&amp;gt; #+END_SRC
** Class Definitions
#+BEGIN_SRC python class &amp;lt;class_name&amp;gt;(): #+END_SRC
~&amp;lt;class_name&amp;gt;~ is an identifier ~~ is a comma-separated list of superclasses. Can be empty, in which case ~object~ is implicit superclass ~~ is a non-empty sequence of statements A class definition creates a class object in much the same way that a function definition creates a function object.</description></item><item><title>Company Scraper</title><link>http://DrCS.codes/intensive-python/exercises/company-scraper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/company-scraper/</guid><description>Company Scraper Introduction In this exercise you will practice
web scraping, and writing CSV files. Problem Description You need to process general information about many different companies from many different sectors. The only place you can consitently find this information is on the web.
Solution Description Write a module called company_scraper.py that scrapes data from SEC.gov&amp;rsquo;s Edgar search engine to extract the name and address of each company in a list of companies contained in a text file, and saves the data in a single CSV file.</description></item><item><title>Control Structures</title><link>http://DrCS.codes/intensive-python/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/control-structures/</guid><description>Control Structures ** Structured Programming
Any algorithm can be expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Repetition - loops We&amp;rsquo;ve already seen sequences of statements. Today we&amp;rsquo;ll learn selection (conditional execution), and repetition.
** Binary Values
There are 10 kinds of people:
those who know binary, and those who don&amp;rsquo;t. ** Python Booleans
In Python, boolean values have the ~bool~ type.</description></item><item><title>CSV Files</title><link>http://DrCS.codes/intensive-python/slides/csv-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/csv-files/</guid><description>CSV Files ** &amp;ldquo;Comma&amp;rdquo;-Separated Values Files
Say we have data in a comma-separated values file
#+BEGIN_SRC sh $ cat capitals.dat # could be .dat, .csv, or anything Japan,Tokyo France,Paris Germany,Berlin U.S.A.,Washington, D.C #+END_SRC
Can use line-by-line file reading with the split() function we saw earlier to process comma-separated value files
#+BEGIN_SRC python $ python
capitals = {} # initialize a dictionary to hold our capitals data for line in open(&amp;lsquo;capitals.</description></item><item><title>Data Exchange Formats</title><link>http://DrCS.codes/intensive-python/slides/data-exchange-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/data-exchange-formats/</guid><description>Data Exchange Formats ** Data Exchange Formats
XML
A verbose textual representation of trees JSON
JavaScript Object notation &amp;ndash; like a Python ~dict~ ** XML Format
[[../code/structured-files][people.xml]]:
#+BEGIN_SRC xml
** Parsing XML with ElementTree
Use Python&amp;rsquo;s built-in [[https://docs.python.org/3/library/xml.etree.elementtree.html][ElementTree API]]
#+BEGIN_SRC python In [17]: import xml.etree.ElementTree as ET
In [18]: root = ET.parse(&amp;lsquo;people.xml&amp;rsquo;)
In [21]: persons = root.findall(&amp;ldquo;person&amp;rdquo;)
In [24]: for person in persons: &amp;hellip;: print(person.</description></item><item><title>Data Structures</title><link>http://DrCS.codes/intensive-python/slides/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/data-structures/</guid><description>Data Structures ** Built-in Data Structures
Values can be collected in data structures:
Lists Tuples Dictionaries Sets This lecture just an overview. See the [[https://docs.python.org/3.6/library/stdtypes.html][Python documentation]] for complete details.
** Lists
A list is an indexed sequence of Python objects.
Create a list with square brackets #+BEGIN_SRC python
boys = [&amp;lsquo;Stan&amp;rsquo;, &amp;lsquo;Kyle&amp;rsquo;, &amp;lsquo;Cartman&amp;rsquo;, &amp;lsquo;Kenny&amp;rsquo;] #+END_SRC
Create an empty list with empty square brackets or ~list()~ function #+BEGIN_SRC python</description></item><item><title>Drill - Data Transformation</title><link>http://DrCS.codes/intensive-python/exercises/data-transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/data-transformation/</guid><description>Drill - Data Transformation Introduction Drills are very short exercises designed to exercise the most basic building blocks of modules and programs.
Problem Description Data manipulation applications almost always include tranformation of data from one or more forms into other forms. In this drill you will practice transforming data stored in data structures into equivalent data stored in different data structures. Such transformations are often done to make the data easier to process for a particular application.</description></item><item><title>Drill - Values and Variables</title><link>http://DrCS.codes/intensive-python/exercises/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/values-variables/</guid><description>Drill - Values and Variables Introduction Drills are very short exercises designed to exercise the most basic building blocks of modules and programs. In this drill you will create a series of values and assign them to variables to solidify your knowledge of values, variables, operators, and types.
Solution Description For each of the comments below, write the specified Python code. You may do this in the Python interactive shell or by creating a text file that you run from the command line or import into an interactive Python shell (which runs the code).</description></item><item><title>Exercise - BMI Module</title><link>http://DrCS.codes/intensive-python/exercises/bmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/bmi/</guid><description>bmi Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings, converting values to different data types, doing arithmetic calculations, and testing modules with doctest. Problem Description You want to live a healthy life and use your computer to help you analyze your fitness and health.
Solution Description Create a module that provides convenience functions for converting imperial measures to metric equivalents, a function to calculate BMI, and two functions that tell you whether you are overweight or underweight according to government BMI standards.</description></item><item><title>Exercise - Data Util Module</title><link>http://DrCS.codes/intensive-python/exercises/data-util/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/data-util/</guid><description>data_util Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings and data structures, testing modules with doctest. Problem Description You need to manipulate Python data (and you&amp;rsquo;re not familiar with Python&amp;rsquo;s standard library).
Solution Description Create a module named data_util that implements the functions described below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>File IO</title><link>http://DrCS.codes/intensive-python/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/file-io/</guid><description>File Input/Output ** Text File IO
File IO is done in Python with the built-in ~File~ object which is returned by the built-in ~open~ function Use the &amp;lsquo;w&amp;rsquo; open mode for writing #+BEGIN_SRC python $ python
f = open(&amp;ldquo;hello.txt&amp;rdquo;,&amp;ldquo;w&amp;rdquo;) # open for writing, create if necessary f.write(&amp;ldquo;Hello, file!\n&amp;rdquo;) # write string to file; notice \n ending f.close() # close file, causing it to write to disk exit() $ cat hello.</description></item><item><title>Functional Programming</title><link>http://DrCS.codes/intensive-python/slides/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/functional-programming/</guid><description>Functional Programming in Python ** Functional Features in Python
Functions are first class, meaning they can be
stored in variables and data structures passed as arguments to functions returned from functions ** Higher-Order Functions
A higher order function is a function that takes another function as a parameter or returns a function as a value. We&amp;rsquo;ve already used one:
#+BEGIN_SRC python
help(sorted) &amp;hellip; sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.</description></item><item><title>Functions</title><link>http://DrCS.codes/intensive-python/slides/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/functions/</guid><description>Functions ** Functions
A function is a reusable block of code. Functions
have names (usually), contain a sequence of statements, and return values, either explicitly or implicitly. We&amp;rsquo;ve already used several built-in functions. Today we will learn how to define our own.
** Hello, Functions!
We define a function using the def keyword:
#+BEGIN_SRC python
def say_hello(): &amp;hellip; print(&amp;lsquo;Hello&amp;rsquo;) &amp;hellip; #+END_SRC
(blank line tells Python shell you&amp;rsquo;re finished defining the function)</description></item><item><title>Getting Started</title><link>http://DrCS.codes/intensive-python/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Grades Module Exercise</title><link>http://DrCS.codes/intensive-python/exercises/grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/grades/</guid><description>Grades Module Introduction In this exercise you will practice
writing functions, using control structures, and manipulating data structures. Problem Description You need to process grades given as a list of lists, list[list[str]], where the first list is a header, and subsequent lists have a name followed by grades. For example:
super_grades = [ # First line is descriptive header. Subsequent lines hold data [&amp;#39;Student&amp;#39;, &amp;#39;Exam 1&amp;#39;, &amp;#39;Exam 2&amp;#39;, &amp;#39;Exam 3&amp;#39;], [&amp;#39;Thorny&amp;#39;, &amp;#39;100&amp;#39;, &amp;#39;90&amp;#39;, &amp;#39;80&amp;#39;], [&amp;#39;Mac&amp;#39;, &amp;#39;88&amp;#39;, &amp;#39;99&amp;#39;, &amp;#39;111&amp;#39;], [&amp;#39;Farva&amp;#39;, &amp;#39;45&amp;#39;, &amp;#39;56&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Rabbit&amp;#39;, &amp;#39;59&amp;#39;, &amp;#39;61&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Ursula&amp;#39;, &amp;#39;73&amp;#39;, &amp;#39;79&amp;#39;, &amp;#39;83&amp;#39;], [&amp;#39;Foster&amp;#39;, &amp;#39;89&amp;#39;, &amp;#39;97&amp;#39;, &amp;#39;101&amp;#39;] ] Write a module named grades with the following functions:</description></item><item><title>Grades Report Exercise</title><link>http://DrCS.codes/intensive-python/exercises/calc-grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/calc-grades/</guid><description>Calc Grades Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to calculate final grades and get summary information on students in a class.
Solution Description Write a program called calc_grades.py that reads student item scores from a CSV file such as super-grades.csv, writes a new CSV file with the same data as the input file with the following additional columns:</description></item><item><title>Hangman Exercise</title><link>http://DrCS.codes/intensive-python/exercises/hangman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/hangman/</guid><description>Hangman Exercise Introduction In this exercise you will practice
writing Python programs and modules, writing programs and modules that use other modules, using control structures, validating user input and dealing with invalid input, using data structures and string processing, and writing interactive console programs. Problem Description You like word-guessing games.
Solution Description Write a Python program in a file named hangman.py that implements the classic Hangman game. Game play proceeds as follows:</description></item><item><title>iPython</title><link>http://DrCS.codes/intensive-python/slides/ipython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/ipython/</guid><description>SciPy ** The SciPy Stack
[[https://www.scipy.org/][SciPy]] is a Python-based ecosystem of libraries and tools for scientific computing and data analytics
[[http://ipython.org/][iPython]] [[http://jupyter.org/][Jupyter notebooks]] [[http://www.numpy.org/][Numpy]] [[http://pandas.pydata.org/][Pandas]] [[http://matplotlib.org/][Matplotlib]] iPython is the primary way of interacting with the SciPy stack &amp;ndash; whether through the shell or a Jupyter notebook &amp;ndash; so we&amp;rsquo;ll learn iPython first
** iPython
Two modes:
Interactive shell
Replacement for ~python~ REPL Jupyter notebook</description></item><item><title>Lessons</title><link>http://DrCS.codes/intensive-python/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/lessons/</guid><description>Lessons PfP means Python for Programmers TP means Think Python, 2nd Edition, by Allen B. Downey Session Topic Resources 1 Introduction to Intensive Python Meet the Teacher
Video: Getting Started on macOS
Video: Getting Started on Windows/WSL2
2 Intro to Python Reading: TP 1
Video: Intro to Python
3 Values and Variables Reading: PfP
Video: Values and Variables</description></item><item><title>Modules and Programs</title><link>http://DrCS.codes/intensive-python/slides/modules-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/modules-programs/</guid><description>Modules and Programs ** Python Programs
Python code organized in
modules, packages, and scripts. We&amp;rsquo;ve already used some modules, now we&amp;rsquo;ll learn what they are, how they&amp;rsquo;re orgainized in packages, and how to write Python programs that can be run on their own, not just entered in the Python command shell.
** Importing Modules
~import~ing a module means getting names from the module into scope. When you import a module, you can access the modules components with the dot operator as in the previous example.</description></item><item><title>Student Emails</title><link>http://DrCS.codes/intensive-python/exercises/student-emails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/student-emails/</guid><description>Student Emails Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to extract all the student emails from a CSV class roster downloaded from T-Square.
Solution Description Write a program that reads a CSV student roster file such as super-roster.csv and prints the email addresses to the console.
Sample Output $ python student_emails.</description></item><item><title>Text Editors for Programmers</title><link>http://DrCS.codes/intensive-python/text-editors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/text-editors/</guid><description>Introduction to Text Editors for Programmers Text is the raw material of the craft of programming. You should become good at manipulating text. The first thing you should do is pick a good cross-platform text editor and learn it well. If you haven&amp;rsquo;t already done so, this guide will help you choose one. The next thing you should do is learn regular expressions, and the next thing after that is learn UNIX and one of its command shells, probably bash.</description></item><item><title>The SciPy Stack</title><link>http://DrCS.codes/intensive-python/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/scipy/</guid><description>SciPy ** Data Analytics/Scientific Computing
Gaining insight from data:
Do instances fall into discernible groups? Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
** What is &amp;ldquo;data?&amp;rdquo;
First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.</description></item><item><title>Tides Exercise</title><link>http://DrCS.codes/intensive-python/exercises/tides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/tides/</guid><description>Tides Introduction In this assignment you will practice writing Python command-line utilities, obtaining data, file I/O, processing CSV files, and using Python&amp;rsquo;s date/time libraries.
Problem Description You are a scuba diving instructor who plans dive trips to West Palm Beach, FL that include dives at the world famous Blue Heron Bridge. The Blue Heron Bridge is a shore dive that is best done at slack high tide, so planning is essential.</description></item><item><title>Treating People as Objects</title><link>http://DrCS.codes/intensive-python/exercises/people-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/exercises/people-objects/</guid><description>Exercise: Treating People as Objects Introduction In this exercise you will practice defining and using classes, and performing simple manipulations of collections of objects.
Problem Description You need to view some data about people in various ways.
Solution Description The people.py module has starter code that creates Person objects in a list peeps. In the people.py file:
Write a Person class with:
an __init__ method that takes: a name (str), a birthdate (str) formatted in ISO 8601 format, a height in cm (int), a weight in kilograms (float), a __repr__ method that returns a str like &amp;lt;name, birthdate, height, weight&amp;gt; field, e.</description></item><item><title>Values and Variables</title><link>http://DrCS.codes/intensive-python/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://DrCS.codes/intensive-python/slides/values-variables/</guid><description>Values and Variables ** Languages and Computation
Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:([[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html][SICP 1.1]])
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. Today we&amp;rsquo;ll begin learning Python&amp;rsquo;s facilities for primitive expresions, combination, and elementary abstraction.</description></item></channel></rss>