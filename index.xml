<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dr. CS codes</title><link>https://DrCS.codes/</link><description>Recent content on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://DrCS.codes/machine-learning/slides/cs4641-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/cs4641-intro/</guid><description>% Introduction to CS4641
Machine Learning: The Big Idea {height=70%}
Machine Learning: The Big Idea {height=70%}
Machine Learning: The Big Idea {height=70%}
Machine Learning: The Big Idea {height=70%}
Berlin is cold!
Course Logistics Syllabus Schedule Project Getting started</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/error/</guid><description>% Error and Noise
Error Measures An error measure quantifies the performance of an $h \in \mathcal{H}$, that is, its agreement with the target function $f$.
$$ Error = E(h, f) $$
The target function is unknown and we only have samples from it (our data set, $\mathcal{D}$), so we use a pointwise approximation. Classification error is
$$ e(h(\vec{x}), f(\vec{x})) = \llbracket h(\vec{x}) \ne f(\vec{x}) \rrbracket $$
for some $\vec{x}$, where $\llbracket \cdot \rrbracket$ evaluates to 1 if argument is true, and to 0 if it is false.</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/intro-ml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/intro-ml/</guid><description>% Introduction to Machine Learning
What is learning? &amp;ldquo;Learning is any process by which a system improves performance from experience.&amp;rdquo;
Herbert Simon What is machine learning? The hype answer:
&amp;ldquo;Machine learning is the next Internet&amp;rdquo;
Tony Tether, Director, DARPA &amp;ldquo;Machine learning is the hot new thing&amp;rdquo;
John Hennessy, President, Stanford &amp;ldquo;Machine learning is today’s discontinuity&amp;rdquo;
Jerry Yang, CEO, Yahoo &amp;ldquo;Machine learning is the new electricity&amp;rdquo; -Andrew Ng, Chief Scientist Baidu</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/linear-classification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/linear-classification/</guid><description>% Linear Classification
The Linear Model In the next few lectures we will
extend the perceptron learning algorithm to handle non-linearly separable data, explore online versis batch learning, learn three different learning settings &amp;ndash; classification, regression, and probability estimation learn a fundamental concept in machine learning: gradient descent see how the learning rate hyperparameter The Linear Model Recall that the linear model for binary classification is:
$$ \mathcal{H} = {h(\vec{x}) = sign(\vec{w}^T \cdot \vec{x})} $$</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/linear-regression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/linear-regression/</guid><description>% Linear Regression
The Linear Model So far we&amp;rsquo;ve dealt with classification, where the target function maps feature vectors to discrete classes, but the linear model is more versatile. Consider the credit analysis problem:
{height=30%}
We can use the linear model to learn
a yes/no (perceptron) an arbitrary real number (linear regression) a probability (logistic regression) As we&amp;rsquo;ll see later, we can even learn to separate classes that are not linearly separable due to their nature, not noise in the data set.</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/ml-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/ml-practice/</guid><description>% Practical Considerations in Machine Learning
Overfitting Overfitting has occurred when your training error decreases and your test error increases.
The primary cause of overfitting is noise in the data set.
More complex models are more likely to overfit.
Regularization Constraining the model to prevent overfitting.
Validation The most important use of validation is for model selection.
Cross-Validation? A resampling technique
Occam&amp;rsquo;s Razor Sampling Bias Data Snooping</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/ml-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/ml-theory/</guid><description>% Computational Learning Theory
Decidability Computation
Decidability &amp;ndash; which problems have algorithmic solutions Machine Learning
Feasibility &amp;ndash; what assumptions must we make to trust that we can learn an unknown target function from a sample data set Complexity Complexity is a measure of efficiency. More efficient solutions use fewer resources.
Computation &amp;ndash; resources are time and space
Time complexity &amp;ndash; as a function of problem size, $n$, how many steps must an algorithm take to solve a problem Space complexity &amp;ndash; how much memory does an algorithm need Machine learning &amp;ndash; resource is data</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/numpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/numpy/</guid><description>% NumPy
Numerical Python Provides efficient storage and operations on dense data buffers, i.e., arrays.
ndarray is the fundamental object Vectorized operations on arrays Broadcasting File IO amd memory-mapped files In [1]: import numpy as np NumPy Array Element Types Arrays have elements of homogeneous data type
In [2]: a = np.array([1, 2, 3.14]) In [3]: type(a) Out[3]: numpy.ndarray In [4]: a Out[4]: array([ 1. , 2. , 3.14]) In [5]: type(a[0]) Out[5]: numpy.</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/pandas/</guid><description>% Pandas % Data Manipulation in Python
Pandas Built on NumPy Adds data structures and data manipulation tools Enables easier data cleaning and analysis import pandas as pd pd.set_option(&amp;#34;display.width&amp;#34;, 120) That last line allows you to display DataFrames with many columns without wrapping.
Pandas Fundamentals Three fundamental Pandas data structures:
Series - a one-dimensional array of values indexed by a pd.Index Index - an array-like object used to access elements of a Series or DataFrame DataFrame - a two-dimensional array with flexible row indices and column names Series from List In [4]: data = pd.</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/pla/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/pla/</guid><description>% Linear Separators % The Perceptron Learning Algorithm
Learning Problem Setup Every machine learning problem contains the following elements:
An input $\vec{x}$ (though, as we&amp;rsquo;ll see later, $\vec{x}$ can be a list aof arbitrary feature values, not necessarily a vector) An unkown target function $f: \mathcal{X} \rightarrow \mathcal{Y}$ A data set $\mathcal{D}$ A learning model, which consists of a hypothesis class $\mathcal{H}$, and a learning algorithm. A learning algorithm uses elements of $\mathcal{D}$ to estimate parameters of of a particular $h(\vec{x})$ from $\mathcal{H}$ which maps every $\vec{x}$ to an element of $\mathcal{Y}$.</description></item><item><title/><link>https://DrCS.codes/machine-learning/slides/spark-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/machine-learning/slides/spark-intro/</guid><description>% Introduction to Spark
Apache Spark &amp;ldquo;Unified computing engine&amp;rdquo;
cluster manager for running programs distributed across multiple computers (&amp;ldquo;nodes&amp;rdquo;) Spark cluster manager, YARN, or Mesos libraries for parallel data processing Spark Applications Driver process runs main() function on a node in the cluster Maintains information about the Spark application Responds to user&amp;rsquo;s program or input Analyzes, distributes, and schedules work across executors Executor processes Carry out work assigned by driver Report state of computation to driver {height=30%}</description></item><item><title/><link>https://DrCS.codes/professional-python/slides/ipython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/ipython/</guid><description>% iPython
The SciPy Stack SciPy is a Python-based ecosystem of libraries and tools for scientific computing and data analytics
iPython Jupyter notebooks Numpy Pandas Matplotlib iPython is the primary way of interacting with the SciPy stack &amp;ndash; whether through the shell or a Jupyter notebook. It&amp;rsquo;s also a fantastic REPL.
iPython Two modes:
Interactive shell
Replacement for python REPL Jupyter notebook
Interactive web-based documents mixing text, executable code, graphics Before we proceed, make sure your computer is ready (OS shell):</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/control-structures/</guid><description>% Control Structures
Structured Programming Any algorithm can be expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Repetition - loops We&amp;rsquo;ve already seen sequences of statements. Today we&amp;rsquo;ll learn selection (conditional execution), and repetition.
The if-else Statement Conditional execution:
if boolean_expression: # a single statement executed when boolean_expression is true else: # a single statement executed when boolean_expression is false boolean_expression is not enclosed in parentheses else: not required Example:</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/ipython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/ipython/</guid><description>% iPython
The SciPy Stack SciPy is a Python-based ecosystem of libraries and tools for scientific computing and data analytics
iPython Jupyter notebooks Numpy Pandas Matplotlib iPython is the primary way of interacting with the SciPy stack &amp;ndash; whether through the shell or a Jupyter notebook. It&amp;rsquo;s also a fantastic REPL.
iPython Two modes:
Interactive shell
Replacement for python REPL Jupyter notebook
Interactive web-based documents mixing text, executable code, graphics Before we proceed, make sure your computer is ready (OS shell):</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/modules-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/modules-programs/</guid><description>% Modules and Programs
Python Programs Python code organized in
modules, packages, and scripts. We&amp;rsquo;ve already used some modules, now we&amp;rsquo;ll learn what they are, how they&amp;rsquo;re orgainized in packages, and how to write Python programs that can be run on their own, not just entered in the Python command shell.
Importing Modules importing a module means getting names from the module into scope. When you import a module, you can access the modules components with the dot operator as in the previous example.</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/strings/</guid><description>% Strings
Strings Three ways to define string literals:
with single quotes: &amp;lsquo;Ni!&amp;rsquo;
double quotes: &amp;ldquo;Ni!&amp;rdquo;
Or with triples of either single or double quotes, which creates a multi-line string:
&amp;gt;&amp;gt;&amp;gt; &amp;#34;&amp;#34;&amp;#34;I do HTML for them all, ... even made a home page for my dog.&amp;#34;&amp;#34;&amp;#34; &amp;#39;I do HTML for them all,\neven made a home page for my dog.&amp;#39; Strings Note that the REPL echoes the value with a \n to represent the newline character.</description></item><item><title/><link>https://DrCS.codes/python/code/analytics/sakila-grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/code/analytics/sakila-grades/</guid><description>Creating Sakila Grades Example First, preliminary imports:
import numpy as np import pandas as pd import pymysql Now get the names from the database.
sakila = pymysql.connect(host=&amp;#34;localhost&amp;#34;, user=&amp;#34;root&amp;#34;, password=&amp;#34;&amp;#34;, db=&amp;#34;sakila&amp;#34;, charset=&amp;#34;utf8mb4&amp;#34;, cursorclass=pymysql.cursors.DictCursor) grades = pd.read_sql(&amp;#34;select first_name, last_name from actor&amp;#34;, con = sakila) grades.head() first_name last_name 0 PENELOPE GUINESS 1 NICK WAHLBERG 2 ED CHASE 3 JENNIFER DAVIS 4 JOHNNY LOLLOBRIGIDA Update the index with login ids taht look like GT login IDs, generated from names, e.</description></item><item><title/><link>https://DrCS.codes/python/code/analytics/water_temps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/code/analytics/water_temps/</guid><description>Water Temps In a Python module named water_temps.py, load the data contained in the file south-atlantic-water-temps.csv, which is in the code/analytics subdirectory of the class web site repository (or download from GitHub: https://raw.githubusercontent.com/datamastery/datamastery.github.io/master/code/analytics/south-atlantic-water-temps.csv) into a Pandas DataFrame named water_temps. Use the first column in the data file as the index (row keys) for the data frame.
Add a column to the water_temps DataFrame with the name avg and whose values are the average temperature for each location.</description></item><item><title/><link>https://DrCS.codes/shared/text-editors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/shared/text-editors/</guid><description>Introduction to Text Editors for Young Programmers Text is the raw material of the craft of programming. You should become good at manipulating text. The first thing you should do is pick a good cross-platform text editor and learn it well. If you haven&amp;rsquo;t already done so, this guide will help you choose one. The next thing you should do is learn regular expressions, and the next thing after that is learn UNIX and one of its command shells, probably bash.</description></item><item><title/><link>https://DrCS.codes/software-engineering/buisiness-domains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/software-engineering/buisiness-domains/</guid><description>% Business Domains</description></item><item><title>BMI</title><link>https://DrCS.codes/python/exercises/bmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/bmi/</guid><description>bmi Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings, converting values to different data types, doing arithmetic calculations, and testing modules with doctest. Problem Description You want to live a healthy life and use your computer to help you analyze your fitness and health.
Solution Description Create a module that provides convenience functions for converting imperial measures to metric equivalents, a function to calculate BMI, and two functions that tell you whether you are overweight or underweight according to government BMI standards.</description></item><item><title>Books XML Exercise</title><link>https://DrCS.codes/python/exercises/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/books/</guid><description>Books Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing XML files, and using Python data structures.
Problem Description You&amp;rsquo;re developing a book selling web site. You receive book data in XML format, like books.xml, and produce various reports about the books you sell.
Solution Description Write a module called books.py with the following functions:
def titles(books): &amp;#34;&amp;#34;&amp;#34;Extract the titles the books XML node and return them in a list.</description></item><item><title>Classes</title><link>https://DrCS.codes/java-oop/slides/classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/classes/</guid><description>Classes Classes Classes
Anatomy of a Class By the end of next lecture, you&amp;#39;ll understand everything in this class definition.
package edu.gatech.cs1331.card; import java.util.Arrays; public class Card { public static final String[] VALID_RANKS = {&amp;#34;2&amp;#34;, ... , &amp;#34;ace&amp;#34;}; public static final String[] VALID_SUITS = {&amp;#34;diamonds&amp;#34;, ... }; private String rank; private String suit; public Card(String aRank, String aSuit) { // ... } public String toString() { return rank + &amp;#34; of &amp;#34; + suit; } private boolean isValidRank(String someRank) { .</description></item><item><title>Classes and Objects</title><link>https://DrCS.codes/professional-python/slides/classes-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/classes-objects/</guid><description>Python is Object-Oriented Every value in Python is an object, meaning an instance of a class. Even values that are considered &amp;ldquo;primitive&amp;rdquo; in some other languages.
&amp;gt;&amp;gt;&amp;gt; type(1) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; Class Definitions class &amp;lt;class_name&amp;gt;(&amp;lt;superclasses&amp;gt;): &amp;lt;body&amp;gt; &amp;lt;class_name&amp;gt; is an identifier &amp;lt;superclasses&amp;gt; is a comma-separated list of superclasses. Can be empty, in which case object is implicit superclass &amp;lt;body&amp;gt; is a non-empty sequence of statements A class definition creates a class object in much the same way that a function definition creates a function object.</description></item><item><title>Classes and Objects</title><link>https://DrCS.codes/programming-python/slides/classes-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/classes-objects/</guid><description>Classes and Objects ** Python is Object-Oriented
Every value in Python is an object, meaning an instance of a class. Even values that are considered &amp;ldquo;primitive&amp;rdquo; in some other languages.
#+BEGIN_SRC python
type(1) &amp;lt;class &amp;lsquo;int&amp;rsquo;&amp;gt; #+END_SRC
** Class Definitions
#+BEGIN_SRC python class &amp;lt;class_name&amp;gt;(): #+END_SRC
~&amp;lt;class_name&amp;gt;~ is an identifier ~~ is a comma-separated list of superclasses. Can be empty, in which case ~object~ is implicit superclass ~~ is a non-empty sequence of statements A class definition creates a class object in much the same way that a function definition creates a function object.</description></item><item><title>Code</title><link>https://DrCS.codes/professional-python/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/code/</guid><description>Example Code analytics cool-new-title.ipynb exam1grades.ipynb exam1grades.png exam1grades.txt funcalc.py gtri-anon-salaries.csv hotjobs.py sakila-grades.csv sakila-grades.ipynb sakila-grades.org salary_comp.ipynb spreadsheet.py super-grades.csv super_grades.ipynb tides.ipynb water_temps.md wpb-tides-2017.txt basics arguments.py calc.py data_structures.py fahrenheit_celsius_v1.py fahrenheit_celsius_v2.py grade_calc.py house.py scripters.csv classes got.py student.py trooper.py databases database.sql dorms.sql got-data.sql got-schema.sql load_people.py people-create.sql people.py people.xml popdb.py pubs-data.sql pubs-schema.sql query-dorms.sql query-pubs.sql gui button.py counter.py csv_gui.py guido400x400.jpg helloqt.py label.py larry500x500.jpg mats500x500.jpg message_box.py mysql_browser.py quitter.py scripters_gui.py sqlite_browser.py todo.py tooltips.py hanglib draw.py words.py structured-files alanturing.xml bdays.json cap_reader.py capitals.</description></item><item><title>Code</title><link>https://DrCS.codes/programming-python/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/code/</guid><description>Example Code Python Basics arguments.py calc.py data_structures.py fahrenheit_celsius_v1.py fahrenheit_celsius_v2.py grade_calc.py house.py scripters.csv Python Classes got.py student.py trooper.py</description></item><item><title>Collections Algorithms</title><link>https://DrCS.codes/java-oop/slides/collections-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/collections-algorithms/</guid><description>Collections Algorithms The Collections Framework A collection is an object that represents a group of objects. The collections framework allows different kinds of collections to be dealt with in an implementation-independent manner. Collections.sort(List&amp;lt;T&amp;gt; list) The collections framework includes algorithms that operate on collections. These algorithms are implemented as static methods of the Collections class. A good example is the (overloaded) sort method:
public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; void sort(List&amp;lt;T&amp;gt; list) This method signature demonstrates how to declare a generic method (so far we&amp;#39;ve seen only generic classs): put a type parameter before the return type.</description></item><item><title>Company Scraper</title><link>https://DrCS.codes/python/projects/company-scraper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/company-scraper/</guid><description>Company Scraper Introduction In this project you will practice
web scraping, and writing CSV files. Problem Description You need to process general information about many companies from many sectors. The only place you can consistently find this information is on the web.
Solution Description Write a script called company_scraper.py that scrapes data from SEC.gov&amp;rsquo;s Edgar search engine to extract the name and address of each company in a list of companies contained in a text file, and saves the data in a single CSV file.</description></item><item><title>Compounding Table</title><link>https://DrCS.codes/python/exercises/compounding-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/compounding-table/</guid><description>Compounding Table Introduction In this assignment you will practice:
writing scripts, using command-line arguments, converting strings to numbers, loops, simple arithmetic, and string formatting. Problem Description You are curious about the future value of an investment given an initial deposit and compounding periodic interest rate.
Solution Description Write a script called compounding_interest.py that takes three command line arguments, an initial deposit, a periodic interest rate, and a number of periods, and prints a table of the value of the deposit amount over time assuming compounding interest and no withdrawals.</description></item><item><title>Control Structures</title><link>https://DrCS.codes/java-oop/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/control-structures/</guid><description>Control Structures Control Flow Issues Multiple vs. single entry (&amp;#34;How did we get here?&amp;#34;) Multiple vs. single exit (&amp;#34;Where do we go from here?&amp;#34;) goto considered harmful (goto makes it hard to answer questions above) Structured Programming All algorithms expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Iteration - loops No goto
Boolean Values Four kinds of boolean expressions:
boolean literals: true and false boolean variables expressions formed by combining non-boolean expressions with comparison operators expressions formed by combining boolean expressions with logical operators Comparison Expressions Equal to: ==, like $=$ in math</description></item><item><title>Control Structures</title><link>https://DrCS.codes/professional-python/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/control-structures/</guid><description>Control Structures Structured Programming Any algorithm can be expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Repetition - loops We&amp;#39;ve already seen sequences of statements. Today we&amp;#39;ll learn selection (conditional execution), and repetition.
The if-else Statement Conditional execution:
if boolean_expression: # a single statement executed when boolean_expression is true else: # a single statement executed when boolean_expression is false boolean_expression is not enclosed in parentheses else: not required Example:</description></item><item><title>Counting</title><link>https://DrCS.codes/discrete-math/slides/counting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/slides/counting/</guid><description>Counting Counting The number of objects of interest.
At the end of this lesson you will
understand the basic collections into which we can group objects, and know how to count several kinds of subsets of objects within collecions. Lists A list is an ordered sequence of elements denoted in literal form with objects – the elements or entries - enclosed in parentheses and separated by commas, e.g.:
$$ (a, b, c) $$</description></item><item><title>CSV Files</title><link>https://DrCS.codes/data-manipulation/slides/csv-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/csv-files/</guid><description>CSV Files &amp;#34;Comma&amp;#34;-Separated Values Files Say we have data in a comma-separated values file
$ cat capitals.dat # could be .dat, .csv, or anything Japan,Tokyo France,Paris Germany,Berlin U.S.A.,Washington, D.C Can use line-by-line file reading with the split() function we saw earlier to process comma-separated value files
$ python &amp;gt;&amp;gt;&amp;gt; capitals = {} # initialize a dictionary to hold our capitals data &amp;gt;&amp;gt;&amp;gt; for line in open(&amp;#39;capitals.dat&amp;#39;, &amp;#39;r&amp;#39;): # for each line in file .</description></item><item><title>Data Exchange Formats</title><link>https://DrCS.codes/data-manipulation/slides/data-exchange-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/data-exchange-formats/</guid><description>Data Exchange Formats Data Exchange Formats XML
A verbose textual representation of trees JSON
JavaScript Object notation – like a Python dict XML Format people.xml:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;people&amp;gt; &amp;lt;person&amp;gt; &amp;lt;firstName&amp;gt;Alan&amp;lt;/firstName&amp;gt; &amp;lt;lastName&amp;gt;Turing&amp;lt;/lastName&amp;gt; &amp;lt;professions&amp;gt; &amp;lt;profession&amp;gt;Computer Scientist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Mathematician&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Computer Scientist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Cryptographer&amp;lt;/profession&amp;gt; &amp;lt;/professions&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person&amp;gt; &amp;lt;firstName&amp;gt;Stephen&amp;lt;/firstName&amp;gt; &amp;lt;lastName&amp;gt;Hawking&amp;lt;/lastName&amp;gt; &amp;lt;professions&amp;gt; &amp;lt;profession&amp;gt;Physicist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Comedian&amp;lt;/profession&amp;gt; &amp;lt;/professions&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;/people&amp;gt; Parsing XML with ElementTree Use Python&amp;#39;s built-in ElementTree API
In [17]: import xml.etree.ElementTree as ET In [18]: root = ET.parse(&amp;#39;people.xml&amp;#39;) In [21]: persons = root.</description></item><item><title>Data Manipulation</title><link>https://DrCS.codes/python/exercises/data-manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/data-manipulation/</guid><description>Data Manipulation Introduction Drills are very short exercises designed to exercise the most basic building blocks of modules and programs.
Problem Description Data manipulation applications almost always include tranformation of data from one or more forms into other forms. In this drill you will practice transforming data stored in data structures into equivalent data stored in different data structures. Such transformations are often done to make the data easier to process for a particular application.</description></item><item><title>Data Structures</title><link>https://DrCS.codes/professional-python/slides/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/data-structures/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets This lecture just an overview. See the Python documentation for complete details.
Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>Data Structures</title><link>https://DrCS.codes/programming-python/slides/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/data-structures/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets This lecture just an overview. See the Python documentation for complete details.
Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>Data Util Module</title><link>https://DrCS.codes/python/exercises/python/data-util/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/data-util/</guid><description>data_util Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings and data structures, testing modules with doctest. Problem Description You need to manipulate Python data (and you&amp;rsquo;re not familiar with Python&amp;rsquo;s standard library).
Solution Description Create a module named data_util that implements the functions described below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>Data Visualization in Python</title><link>https://DrCS.codes/data-manipulation/slides/python-dataviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/python-dataviz/</guid><description>Data Visualization Data Visualization :BMCOL:B_block: :BMCOL:B_block: Data graphics visually display measured quantities by means of the combined use of points, lines, a coordinate system, numbers, words, shading, and color.
– Edward Tufte, The Visual Display of Quantitative Information
Data Visualization in Python You already know basic concepts of visualization, and there are many courses that go in depth. Here we&amp;#39;ll learn how to manipulate the data and parameters of the visualizations available in the SciPy stack.</description></item><item><title>Dates</title><link>https://DrCS.codes/python/exercises/dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/dates/</guid><description>Dates Introduction In this assignment you will practice:
writing functions, documenting functions, doing basic operations with values and variables, and dealing with date-related data. Problem Description You want to get information about dates and days that require some calculation
Solution Description Write a module called dates (which you should save in a file called dates.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.</description></item><item><title>Dates</title><link>https://DrCS.codes/python/exercises/python/dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/dates/</guid><description>Dates Introduction In this assignment you will practice:
writing functions, documenting functions, doing basic operations with values and variables, and dealing with date-related data. Problem Description Solution Description Write a module called dates (which you should save in a file called dates.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.6, Chapter 3 and summarized in our slides on Python functions, including the type contract using type hints and a docstring.</description></item><item><title>Dictionaries and Sets</title><link>https://DrCS.codes/professional-python/slides/dictionaries-sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/dictionaries-sets/</guid><description>Dictionaries and Sets Dictionaries and Sets Dictionaries map keys to values Sets represent mathematical sets Byt the end of this lesson you will
know how to use dictionaries know jow to use sets Dictionaries A dictionary is a map from keys to values.
Create dictionaries with {}
&amp;gt;&amp;gt;&amp;gt; capitals = {} Add key-value pairs with assignment operator
&amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Georgia&amp;#39;] = &amp;#39;Atlanta&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Alabama&amp;#39;] = &amp;#39;Montgomery&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals {&amp;#39;Georgia&amp;#39;: &amp;#39;Altanta&amp;#39;, &amp;#39;Alabama&amp;#39;: &amp;#39;Montgomery&amp;#39;} Keys are unique, so assignment to same key updates mapping</description></item><item><title>Dog Module</title><link>https://DrCS.codes/python/exercises/dog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/dog/</guid><description>Dog Module Write a module named dog which has a class named Dog with
an instance variable named name an instance variable named breed a constructor/initializer that takes name and breed parameters and uses them to initialize the instance variables a string representation that prints the name and breed of the dog, e.g., 'Chloe the Doberman' When your dog module is run as a script, it should use the first two command line arguments to your script to pass as the name and breed in the construction of an instance of Dog, then print the Dog instance using the print function.</description></item><item><title>Email Utilities</title><link>https://DrCS.codes/python/exercises/email-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/email-utils/</guid><description>Email Utilites In this exercise you will practice:
string manipulation, string methods, simple boolean expressions, and writing functions. Introduction Emails are of the form @. For example, bob@aol.com means there is a bob user account on the aol.com server. Email address are case insensitive, so Liger@SweetAnimals.com is the same as liger@sweetanimals.com. (This is a bit of a simplification, but fits our purpose here.)
Problem Description You need to extract user names and server names from email addresses, and compare two emails to determine if they are the same.</description></item><item><title>Email Utilities</title><link>https://DrCS.codes/python/exercises/python/email-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/email-utils/</guid><description>Email Utilites In this exercise you will practice:
string manipulation, string methods, simple boolean expressions, and writing functions. Introduction Emails are of the form @. For example, bob@aol.com means there is a bob user account on the aol.com server. Email address are case insensitive, so Liger@SweetAnimals.com is the same as liger@sweetanimals.com. (This is a bit of a simplification, but fits our purpose here.)
Problem Description You need to extract user names and server names from email addresses, and compare two emails to determine if they are the same.</description></item><item><title>File IO</title><link>https://DrCS.codes/data-manipulation/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/file-io/</guid><description>File Input/Output Text File IO File IO is done in Python with the built-in File object which is returned by the built-in open function Use the &amp;#39;w&amp;#39; open mode for writing $ python &amp;gt;&amp;gt;&amp;gt; f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;w&amp;#34;) # open for writing, create if necessary &amp;gt;&amp;gt;&amp;gt; f.write(&amp;#34;Hello, file!\n&amp;#34;) # write string to file; notice \n ending &amp;gt;&amp;gt;&amp;gt; f.close() # close file, causing it to write to disk &amp;gt;&amp;gt;&amp;gt; exit() $ cat hello.</description></item><item><title>File IO</title><link>https://DrCS.codes/professional-python/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/file-io/</guid><description>File Input/Output Text File IO File IO is done in Python with the built-in File object which is returned by the built-in open function Use the &amp;#39;w&amp;#39; open mode for writing $ python &amp;gt;&amp;gt;&amp;gt; f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;w&amp;#34;) # open for writing, create if necessary &amp;gt;&amp;gt;&amp;gt; f.write(&amp;#34;Hello, file!\n&amp;#34;) # write string to file; notice \n ending &amp;gt;&amp;gt;&amp;gt; f.close() # close file, causing it to write to disk &amp;gt;&amp;gt;&amp;gt; exit() $ cat hello.</description></item><item><title>File IO</title><link>https://DrCS.codes/programming-python/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/file-io/</guid><description>File Input/Output ** Text File IO
File IO is done in Python with the built-in ~File~ object which is returned by the built-in ~open~ function Use the &amp;lsquo;w&amp;rsquo; open mode for writing #+BEGIN_SRC python $ python
f = open(&amp;ldquo;hello.txt&amp;rdquo;,&amp;ldquo;w&amp;rdquo;) # open for writing, create if necessary f.write(&amp;ldquo;Hello, file!\n&amp;rdquo;) # write string to file; notice \n ending f.close() # close file, causing it to write to disk exit() $ cat hello.</description></item><item><title>Fit</title><link>https://DrCS.codes/python/projects/fit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/fit/</guid><description>fit Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, doing arithmetic calculations, simple text processing, and testing modules with doctest. Problem Description You run a phyical fitness contest modeled after Navy Special Warfare&amp;rsquo;s physical screening test. You get data from contestants that includes times on a run, a swim, push-ups, pull-ups, and sit-ups and you must convert these times and numbers to a single score that can be used to rank fitness contest entries.</description></item><item><title>Flask</title><link>https://DrCS.codes/data-manipulation/slides/flask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/flask/</guid><description>Flask Flask Python&amp;#39;s built-in web server is nice, but serious web development is done using a web framework. Web frameworks typically provide:
Routes, which map URLs to server files or Python code Templates, which dynamically insert server-side data into pages of HTML Authentication and authorization of user names, passwords, permissions Sessions, which keep track of a user during a single visit to a site and more … We&amp;#39;ll use a simple Python web framework called Flask.</description></item><item><title>Function Design</title><link>https://DrCS.codes/programming-python/slides/function-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/function-design/</guid><description>Function Design Recipe Examples
What a few representative calls to the function look like in the Python REPL. Think from the function user&amp;rsquo;s perspective. Examples become doctests in the function&amp;rsquo;s docstring. Header
Parameter names and types Return type Description
Short paragraph (1 or 2 sentences) describing the function&amp;rsquo;s behavior. Body
Implement the algorithm (sequence of statements) that accomplishes the function&amp;rsquo;s task, deriving the function&amp;rsquo;s output (return value) and/or effect from the the function&amp;rsquo;s inputs (arguments).</description></item><item><title>Functional Programming</title><link>https://DrCS.codes/programming-python/slides/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/functional-programming/</guid><description>Functional Programming in Python ** Functional Features in Python
Functions are first class, meaning they can be
stored in variables and data structures passed as arguments to functions returned from functions ** Higher-Order Functions
A higher order function is a function that takes another function as a parameter or returns a function as a value. We&amp;rsquo;ve already used one:
#+BEGIN_SRC python
help(sorted) &amp;hellip; sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.</description></item><item><title>Functional Programming in Python</title><link>https://DrCS.codes/professional-python/slides/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/functional-programming/</guid><description>Functional Features in Python Functions are first class, meaning they can be
stored in variables and data structures passed as arguments to functions returned from functions Higher-Order Functions A higher order function is a function that takes another function as a parameter or returns a function as a value. We&amp;rsquo;ve already used one:
&amp;gt;&amp;gt;&amp;gt; help(sorted) ... sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.</description></item><item><title>Functions</title><link>https://DrCS.codes/professional-python/slides/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/functions/</guid><description>Functions Functions A function is a reusable block of code. Functions
have names (usually), contain a sequence of statements, and return values, either explicitly or implicitly. We&amp;#39;ve already used several built-in functions. Today we will learn how to define our own.
Hello, Functions! We define a function using the def keyword:
&amp;gt;&amp;gt;&amp;gt; def greet(): ... print(&amp;#39;Hello&amp;#39;) ... (blank line tells Python shell you&amp;#39;re finished defining the function)
Once the function is defined, you can call it:</description></item><item><title>Functions</title><link>https://DrCS.codes/programming-python/slides/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/functions/</guid><description>Functions Functions A function is a reusable block of code. Functions
have names (usually), contain a sequence of statements, and return values, either explicitly or implicitly. We&amp;#39;ve already used several built-in functions. Today we will learn how to define our own.
Hello, Functions! We define a function using the def keyword:
&amp;gt;&amp;gt;&amp;gt; def greet(): ... print(&amp;#39;Hello&amp;#39;) ... (blank line tells Python shell you&amp;#39;re finished defining the function)
Once the function is defined, you can call it:</description></item><item><title>Generate Sentence</title><link>https://DrCS.codes/python/projects/generate-sentence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/generate-sentence/</guid><description>generate_sentence Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, using lists and dictionaries, selective logic (if statements), simple text processing, and testing modules with doctest. Problem Description You&amp;rsquo;re interested in natural language processing and, having learned about context free grammars for natural languages, you want to experiment with sentence generation.
Solution Description Write a module named generate_sentence with functions that can be used to generate noun phrases, verb phrases and sentences in subject-verb-object form.</description></item><item><title>Getting Started</title><link>https://DrCS.codes/cnds-go/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/cnds-go/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Getting Started</title><link>https://DrCS.codes/computing/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/computing/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Getting Started</title><link>https://DrCS.codes/data-manipulation/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Getting Started</title><link>https://DrCS.codes/discrete-math/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Getting Started</title><link>https://DrCS.codes/professional-python/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/getting-started/</guid><description>Getting Started These instructions are for installing and configuring the software used in this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.6, pip, and venv.
Install Python. Jump to the section matching the operating system you will be using to install Python:
macOS Windows Ubuntu/WSL Install and configure IntelliJ or PyCharm.</description></item><item><title>Getting Started</title><link>https://DrCS.codes/programming-python/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/getting-started/</guid><description>Getting Started These instructions are for installing and configuring the software used in this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.6, pip, and venv.
Install Python. Jump to the section matching the operating system you will be using to install Python:
macOS Windows Ubuntu/WSL Install and configure IntelliJ or PyCharm.</description></item><item><title>Getting Started</title><link>https://DrCS.codes/software-engineering/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/software-engineering/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Git</title><link>https://DrCS.codes/shared/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/shared/git/</guid><description>Git This guide provides a brief introduction to Git and GitHub
Installation Linux You almost certainly have it already. If not,
Debian-based (like Ubuntu):
sudo apt install git Red Hat-based (like Fedora):
sudo yum install git Note: I haven&amp;rsquo;t used Fedora in many years, so double check that.
macOS If you have a Mac, I recommend Homebrew. Then installing git is easy:
brew install git It&amp;rsquo;s a good idea to update brew and your brew packages first:</description></item><item><title>Grades Module Exercise</title><link>https://DrCS.codes/python/exercises/python/grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/grades/</guid><description>Grades Module Introduction In this exercise you will practice
writing functions, using control structures, and manipulating data structures. Problem Description You need to process grades given as a list of lists, list[list[str]], where the first list is a header, and subsequent lists have a name followed by grades. For example:
super_grades = [ # First line is descriptive header. Subsequent lines hold data [&amp;#39;Student&amp;#39;, &amp;#39;Exam 1&amp;#39;, &amp;#39;Exam 2&amp;#39;, &amp;#39;Exam 3&amp;#39;], [&amp;#39;Thorny&amp;#39;, &amp;#39;100&amp;#39;, &amp;#39;90&amp;#39;, &amp;#39;80&amp;#39;], [&amp;#39;Mac&amp;#39;, &amp;#39;88&amp;#39;, &amp;#39;99&amp;#39;, &amp;#39;111&amp;#39;], [&amp;#39;Farva&amp;#39;, &amp;#39;45&amp;#39;, &amp;#39;56&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Rabbit&amp;#39;, &amp;#39;59&amp;#39;, &amp;#39;61&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Ursula&amp;#39;, &amp;#39;73&amp;#39;, &amp;#39;79&amp;#39;, &amp;#39;83&amp;#39;], [&amp;#39;Foster&amp;#39;, &amp;#39;89&amp;#39;, &amp;#39;97&amp;#39;, &amp;#39;101&amp;#39;] ] Write a module named grades with the following functions:</description></item><item><title>Grades Report Exercise</title><link>https://DrCS.codes/python/exercises/python/calc-grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/calc-grades/</guid><description>Calc Grades Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to calculate final grades and get summary information on students in a class.
Solution Description Write a program called calc_grades.py that reads student item scores from a CSV file such as super-grades.csv, writes a new CSV file with the same data as the input file with the following additional columns:</description></item><item><title>Hangman Exercise</title><link>https://DrCS.codes/python/exercises/python/hangman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/hangman/</guid><description>Hangman Exercise Introduction In this exercise you will practice
writing Python programs and modules, writing programs and modules that use other modules, using control structures, validating user input and dealing with invalid input, using data structures and string processing, and writing interactive console programs. Problem Description You like word-guessing games.
Solution Description Write a Python program in a file named hangman.py that implements the classic Hangman game. Game play proceeds as follows:</description></item><item><title>Homework 0</title><link>https://DrCS.codes/python/exercises/hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/hw0/</guid><description>Homework 0 Introduction This assignment gets you started with the basic tools you will need to complete all of your homework projects. This project will
ensure that you have correctly installed Python 3 give you practice using a text editor to write Python programs, and give you practice running Python programs and using command line features. Problem Description You are a student who needs to install Python, configure it for command line use, and learn how to use a programmer&amp;rsquo;s text editor to create and edit Python source code.</description></item><item><title>Homework 0</title><link>https://DrCS.codes/python/exercises/python/hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/hw0/</guid><description>Homework 0 Introduction This assignment gets you started with the basic tools you will need to complete all of your homework projects. This project will
ensure that you have correctly installed Python 3 give you practice using a text editor to write Python programs, and give you practice running Python programs and using command line features. Problem Description You are a student who needs to install Python, configure it for command line use, and learn how to use a programmer&amp;rsquo;s text editor to create and edit Python source code.</description></item><item><title>Inheritance</title><link>https://DrCS.codes/java-oop/slides/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/inheritance/</guid><description>Inheritance Programming in the large Software is complex. Three ways we deal with complexity:
Abstraction - boiling a concept down to its essential elements, ignoring irrelevant details Decomposition - decompose system into packages, classes, functions Reuse - reuse library function in many diferent places Today we introduce another kind of resuse: inheritance
What is inheritance? What is inheritance? More like genetics …
… but a programming concept that, like so much in CS, borrows a term from another field to leverage our intuition.</description></item><item><title>IntelliJ</title><link>https://DrCS.codes/shared/intellij/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/shared/intellij/</guid><description>IntelliJ/Pycharm Almost all professional Java and Scala development teams use IntelliJ IDEA, an IDE (integrated development environment) for Java and many other languages, including Python and Go. Most professional Python programmers use PyCharm, or IntelliJ with the Python plugin, which is equivalent to PyCharm. JetBrains has a well-earned reputation for making the best developer tools. It is possible to get much of the same functionality with VS Code by installing several plugins, but the quality of the plugins is usually inferior.</description></item><item><title>Introduction to Computing</title><link>https://DrCS.codes/programming-python/slides/intro-computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/intro-computing/</guid><description>Computing for Computing Professionals Many professionals use and even rely on computers, typically with a set software products that are tailored, or can be tailored to their needs.
Business leaders use word processors, presentation software, spreadsheets and project managers. Doctors use electronic health care records and appointment scheduling systems. Lawyers use word processors and specialized legal search engines. Accountants use accounting ledger software and spreadsheets. Photographers and Videographers use photo and video editing tools.</description></item><item><title>Introduction to Distributed Systems</title><link>https://DrCS.codes/cnds-go/slides/intro-distributed-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/cnds-go/slides/intro-distributed-systems/</guid><description>Introduction to Distributed Systems Distributed Systems A distributed system is a collection of autonomous computing elements that appears to its users as a single coherent system. – van Steen and Tanenbaum, Distributed Systems
A distributed system is one in which the failure of a computer you didn&amp;#39;t even know existed can render your own computer unusable. – Leslie Lamport
Why? Availability Scale (workload too big for single computer) Performance Why not?</description></item><item><title>Introduction to Go Programming</title><link>https://DrCS.codes/go/intro-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/go/intro-go/</guid><description>Introduction to Go Programming The Go Programming Language Made by Google.
Installing Go Download the Go distribution for your OS from https://go.dev/dl/ Install Go using the instructions for your OS at https://go.dev/doc/install If installation was successful, you should see this at the command line (❯ is the command prompt. The command to type appears after the prompt, and the output of the command is printed on the next line.):</description></item><item><title>Introduction to Java</title><link>https://DrCS.codes/java-oop/slides/intro-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/intro-java/</guid><description>Introduction to Java Java Developed for home appliances - cross-platform VM a key feature Originally called Oak Gained notariety with HotJava web browser that could run ``programs over the internet&amp;#39;&amp;#39; called applets Gained popularity when Netscape included Java VM in Navigator web browser JavaScript is purely a marketing label meant to capitalize on Java hype - there is no relationship between Java and JavaScript Java is a general-purpose application programming language.</description></item><item><title>Introduction to Logic</title><link>https://DrCS.codes/discrete-math/slides/intro-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/slides/intro-logic/</guid><description>Introduction to Logic Logic A foundational branch of mathematics (the other foundation is set theory) that deals with the assignment of truth values to statements, also called deduction or proof.
Statements, a.k.a., sentences, are either true, false, or neither. Propositions are either true or false. Axioms are propositions that are assumed to be true. Consider them the starting rules of a system. Example:
Assuming the axioms of standard arithmetic,</description></item><item><title>Introduction to Logic</title><link>https://DrCS.codes/discrete-math/slides/propositional-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/slides/propositional-logic/</guid><description>Introduction to Logic Logic A foundational branch of mathematics (the other foundation is set theory) that deals with the assignment of truth values to statements, also called deduction or proof.
Statements, a.k.a., sentences, are either true, false, or neither. Propositions are either true or false. Axioms are propositions that are assumed to be true. Consider them the starting rules of a system. Example:
Assuming the axioms of standard arithmetic,</description></item><item><title>Introduction to Professional Python</title><link>https://DrCS.codes/professional-python/slides/intro-professional-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/intro-professional-python/</guid><description>Professional Python Faced-paced coverage of core Python. Assumes you know programming principles, not necessarily in Python Goes deeper into the Python language than a Python-based CS1 course The video for each lesson is about 30 minutes. Each lesson should take you 45-60 minutes if you pause the video and do the active reviews when asked. Each exercise should take you an hour or less. Projects should take you two to 10 hours.</description></item><item><title>Introduction to Python</title><link>https://DrCS.codes/professional-python/slides/intro-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/intro-python/</guid><description>Introduction to Computing with Python Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>Introduction to Python</title><link>https://DrCS.codes/programming-python/slides/intro-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/intro-python/</guid><description>Introduction to Computing with Python Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>Language Dictionary</title><link>https://DrCS.codes/python/exercises/language-dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/language-dictionary/</guid><description>Language Dictionary Introduction In this assignment you&amp;rsquo;ll practice
writing command-line tools, and working with dictionaries. Problem Description You want to quickly look up word translations in foreign languges.
Solution Description Write a script that takes two command line arguments, a word and a target language, and prints the word from the target language that corresponds to the word provided. Provide at least the following words, feel free to add your own:</description></item><item><title>Lessons</title><link>https://DrCS.codes/algorithms/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/algorithms/lessons/</guid><description>Lessons Course Materials CLRS: Introduction to Algorithms, 4ed ADM: Algorithm Design Manual, 3ed Lessons # Slides Readings Exercises Projects Videos Foundations 2 Introduction to Algorithms CLRS 1; ADM 1.1, 1.2, 1.5
3 Correctness CLRS 2; ADM 1.3, 1.4, 1.6
4 Algorithm Analysis CLRS 2.2-2.3, 3; ADM 2
Data Structures 6 Lists CLRS: 10.2, 10.3; ADM: 3.1
7 Stacks and Queues CLRS 10.1; ADM 3.2
8 Hash Tables CLRS: 11; ADM: 3.</description></item><item><title>Lessons</title><link>https://DrCS.codes/cnds-go/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/cnds-go/lessons/</guid><description>Lessons Session Topic Resources 1 Introduction Meet the Teacher
Video: Getting Started on macOS
Video: Getting Started on Linux
Video: Getting Started on Windows/WSL2
Go Review 2 Go Types Basic Reading: GoPL Ch 1, 2
Additional Reading: Learning Go Ch 2, 3
Go Language Specification
Go Standard Library Packages
3 Functions Basic Reading: GoPL Ch 5
Additional Reading: Learning Go Ch 5
4 Go Modules and Packages Basic Reading: GoPL Ch 10, Using Go Modules</description></item><item><title>Lessons</title><link>https://DrCS.codes/computing/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/computing/lessons/</guid><description>Course Materials CNO: Computer and Network Organization Lessons # Slides Readings Exercises Projects Videos 1 Introduction to Computing Meet the Teacher
2 Computers Basic:
Deeper dive: CNO 1-3
3 Command Shells Basic:
4 Text Basic:
Deeper dive: CNO 2.2.2
5 Mark-up Languages Basic:
Deeper dive: CNO 2.2.2
6 Networks Basic:
Deeper dive: CNO 6-10
7 Git Basic:
Deeper dive: CNO 2.2.2</description></item><item><title>Lessons</title><link>https://DrCS.codes/data-manipulation/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/lessons/</guid><description>Lessons PfP means Python for Programmers TP means Think Python, 2nd Edition, by Allen B. Downey Session Topic Resources 1 Introduction to Data Manipulation Meet the Teacher
Video: Getting Started on macOS
Video: Getting Started on Windows/WSL2
Video: Getting Started on Linux
2 CSV Files IP 8
Structured Files Example Code
Exercise: Student Emails
Exercise: Tides
Exercise: Calculate Grades
3 Data Exchange Formats IP 8
XML Details
Python XML and Database APIs</description></item><item><title>Lessons</title><link>https://DrCS.codes/discrete-math/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/lessons/</guid><description>Course Materials BoP: Book of Proof PLL: Probability: Lectures and Labs Lessons # Slides Readings Exercises Projects Videos Fundamentals 2 Sets BoP 1.1-1.4
3 Set Operations BoP 1.5-1.10
4 Propositional Logic BoP 2.1-2.6
5 First-Order Logic BoP 2.7-2.12
Combinatorics 7 Counting BoP 3.1-3.5
8 Applications of Counting BoP 3.6-3.10
9 Discrete Probability PLL 1-3
Proving Conditional Statements 11 Direct Proof BoP 4
12 Contrapositive Proof BoP 5
13 Proof by Contradiction BoP 6</description></item><item><title>Lessons</title><link>https://DrCS.codes/professional-python/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/lessons/</guid><description>Course Materials PfP: Python for Programmers PPP: Practical Programming: An Introduction to Computer Science Using Python 3.6, 3ed TP: Think Python, 2nd Edition, by Allen B. Downey Lessons # Slides Readings Exercises Projects Videos 1 Course Introduction PfP 1; TP 1
hw0
Install Python and PyCharm
Install and Set up Git
Introduction to Professional Python
2 Tour of Python PfP 1; TP 1
Compounding Table
Tour of Python
3 Values and Variables PfP 2; TP 2</description></item><item><title>Lessons</title><link>https://DrCS.codes/programming-python/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/lessons/</guid><description>Course Materials PPP: Practical Programming: An Introduction to Computer Science Using Python 3.6, 3ed TP: Think Python, 2nd Edition, by Allen B. Downey Lessons # Slides Readings Exercises Projects Videos 1 Introduction to Programming Principles in Python Meet the Teacher
2 Introduction to Computing PPP 1, 2; TP 1
hw0
Introduction to Computing
3 Introduction to Programming in Python PPP 1, 2; TP 1
hw0
Install Python and PyCharm on macOS</description></item><item><title>Lessons</title><link>https://DrCS.codes/software-engineering/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/software-engineering/lessons/</guid><description>Lessons Session Topic Resources Software Development 1 Software Engineering Core Reading: Video: Software Engineering
2 Core Reading: Additional Reading: 3 Core Reading: Additional Reading: [](
4 Core Reading: Additional Reading: [](
5 Core Reading: Additional Reading: [](
Software Design 6 Core Reading: Additional Reading: [](
7 Core Reading: Additional Reading: [](
8 Core Reading: Additional Reading: [](
9 Core Reading: Additional Reading: [](
10 Core Reading: Additional Reading: [](</description></item><item><title>Lessons</title><link>https://DrCS.codes/swe/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/swe/lessons/</guid><description>Lessons Session Topic Resources Software Development 1 Software Engineering Core Reading: Video: Software Engineering
2 Core Reading: Additional Reading: 3 Core Reading: Additional Reading: [](
4 Core Reading: Additional Reading: [](
5 Core Reading: Additional Reading: [](
Software Design 6 Core Reading: Additional Reading: [](
7 Core Reading: Additional Reading: [](
8 Core Reading: Additional Reading: [](
9 Core Reading: Additional Reading: [](
10 Core Reading: Additional Reading: [](</description></item><item><title>Markov Chains</title><link>https://DrCS.codes/python/projects/markov-chains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/markov-chains/</guid><description>Markov Chains Introduction In this assignment you&amp;rsquo;ll practice
writing classes and modules, simple text processing, and basic numerical computing issues in Python. Problem Description You&amp;rsquo;re interested in natural language processing, and in the problem of identifying the source of a text.
Solution Description Write a module named source.py with a class named SourceModel whose constructor takes a name for a source, and a courpus object of type TextIOWrapper (such as a file object &amp;ndash; see io module) and builds a first-order Markov model of the transitions between letters in the source.</description></item><item><title>Matrix Operations</title><link>https://DrCS.codes/python/exercises/matrixops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/matrixops/</guid><description>Matrix Operations Introduction In this assignment you will practice:
manipulating data structures, and translating a specification (e.g., a mathematical definition) into code. Problem Description You are writing an application that needs to perform basic operations on matrices.
Solution Description Write a module called matrixops (which you should save in a file called matrixops.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.</description></item><item><title>Modules and Programs</title><link>https://DrCS.codes/professional-python/slides/modules-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/modules-programs/</guid><description>Modules and Programs Python Programs Python code organized in
modules, packages, and scripts. We&amp;#39;ve already used some modules, now we&amp;#39;ll learn what they are, how they&amp;#39;re orgainized in packages, and how to write Python programs that can be run on their own, not just entered in the Python command shell.
Importing Modules To import a module means to get names from the module into scope, or add them to a namespace.</description></item><item><title>Movies Part 1 - ETL</title><link>https://DrCS.codes/python/projects/movies/movies-etl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/movies/movies-etl/</guid><description>Movies Part 1 - ETL Introduction In this assignment you&amp;rsquo;ll create and execute an ETL pipeline for movie data.
General Instructions This is an individual assignment.
Since this project counts for an exam grade you may not collaborate with your classmates. You may discuss general concepts related to the assignment, such as how to use the Python libraries in general terms, but you may not discuss any specifics of this assignment with anyone other than the course instructor or the TAs.</description></item><item><title>Movies Part 2 - Analysis</title><link>https://DrCS.codes/python/projects/movies/movies-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/movies/movies-analysis/</guid><description>Movies Part 2 - Analysis Introduction In this assignment you&amp;rsquo;ll do some basic analysis of the data you created with your ETL pipeline from Part 1.
General Instructions This is an individual assignment.
Since this project counts for an exam grade you may not collaborate with your classmates. You may discuss general concepts related to the assignment, such as how to use the Python libraries in general terms, but you may not discuss any specifics of this assignment with anyone other than the course instructor or the TAs.</description></item><item><title>MSA Boot Camp</title><link>https://DrCS.codes/intensive-python/msabc2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/intensive-python/msabc2021/</guid><description>Python Bootcamp for Georgia Tech MS Analytics This in-person bootcamp delivers all of the lessons in Professional Python and, as time permits, the first few lessons in Data Manipulation.
To get started, go to Professional Python and click on the Getting Started link in the top menu.</description></item><item><title>MSA Boot Camp</title><link>https://DrCS.codes/professional-python/msabc2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/msabc2021/</guid><description>Go to the general MSA Bootcamp page.</description></item><item><title>NumPy</title><link>https://DrCS.codes/data-manipulation/slides/numpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/numpy/</guid><description>NumPy Numerical Python Provides efficient storage and operations on dense data buffers, i.e., arrays.
ndarray is the fundamental object Vectorized operations on arrays Broadcasting File IO amd memory-mapped files In [1]: import numpy as np NumPy Array Element Types Arrays have elements of homogeneous data type
In [2]: a = np.array([1, 2, 3.14]) In [3]: type(a) Out[3]: numpy.ndarray In [4]: a Out[4]: array([ 1. , 2. , 3.14]) In [5]: type(a[0]) Out[5]: numpy.</description></item><item><title>Pandas</title><link>https://DrCS.codes/data-manipulation/slides/pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/pandas/</guid><description>Pandas Pandas Built on NumPy Adds data structures and data manipulation tools Enables easier data cleaning and analysis import pandas as pd pd.set_option(&amp;#34;display.width&amp;#34;, 120) That last line allows you to display DataFrames with many columns without wrapping.
Pandas Fundamentals Three fundamental Pandas data structures:
Series - a one-dimensional array of values indexed by a pd.Index Index - an array-like object used to access elements of a Series or DataFrame DataFrame - a two-dimensional array with flexible row indices and column names Series from List In [4]: data = pd.</description></item><item><title>Playlists</title><link>https://DrCS.codes/python/projects/playlists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/playlists/</guid><description>Playlists Introduction In this assignment you will practice data transfer techniques such as
reading CSV files, using data structures, creating JSON files, and using os tools. Problem Description You have a list of songs in a comma-separated values file and you want to publish it as a playlist to a site that supports the JSPF JSON format for sharing playlists.
Solution Description Write a Python program in a file named csv2jspf.</description></item><item><title>Polymorphism</title><link>https://DrCS.codes/java-oop/slides/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/polymorphism/</guid><description>Polymorphism Introduction to Object-Oriented Programming Today we&amp;#39;ll learn how to combine all the elements of object-oriented programming in the design of a program that handles a company payroll. Object-oriented programming requires three features:
Data abstraction with classes (encapsulation) Inheritance Dynamic method binding That last part, dynamic method binding, provides for subtype polymorphism, which we&amp;#39;ll learn today.
Class Hierarchies UML class hierarchies depict the superclass-subclass relationships between families of related classes.</description></item><item><title>Practice</title><link>https://DrCS.codes/professional-python/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/practice/</guid><description>Python Practice These programming problems provide practice applying what you have learned in the lessons. Many of these problems are also linked in the lesson listings for the appropriate course and indicate the knowledge required to complete the practice activity.
Exercises Exercises are designed to take no more than an hour to complete and give you practice using various features of Python.
BMI Books XML Exercise Compounding Table Data Manipulation Dates Dog Module Email Utilities Homework 0 Language Dictionary Matrix Operations String Fun Text Utilities Treating People as Objects Values and Variables Water Temps Analysis Projects Projects may take several days to complete and require you to solve design problems and learn material (such as third party libraries) that are not covered directly in the lessons.</description></item><item><title>Programs and Methods</title><link>https://DrCS.codes/java-oop/slides/programs-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/programs-methods/</guid><description>Programs and Methods The Anatomy of a Java Program public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;#34;Hello, world!&amp;#34;); } } First line declares HelloWorld class. class is the syntax for declaring a class, and prepending with the public modifer means the class will be visible outside HelloWorld&amp;#39;s package. The code between the curly braces, { … } define the contents of the HelloWorld class, in this case a single method, main The main Method In order to make a class executable with the java command, it must have a main method:</description></item><item><title>Python DB-API</title><link>https://DrCS.codes/data-manipulation/slides/python-db-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/python-db-api/</guid><description>Python Database API Database Programming in Python DB-API: https://www.python.org/dev/peps/pep-0249/ SQLite3 is built-in: import sqlite3 MySQL reguires third-party library
$ conda install pymysql ... $ python Python 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; import pymysql Key point: most database APIs, including Python&amp;#39;s DB-API, are simply ways of executing SQL statements and getting the results of SQL statements.</description></item><item><title>Relational Data Model</title><link>https://DrCS.codes/data-manipulation/slides/relational-dat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/relational-dat-model/</guid><description>Relational Data Model Relational Data Model A relation schema $R(A_a, ..., A_n)$ is a relation name $R$ and a list of attributes $A_1, ..., A_n$.
Each attribute $A_i$ is the name of a role played by some domain $D$.
Example: $AUTHOR(author\_id, first\_name, last\_name)$
$dom(A_1)$ (or $dom(author\_id)$) is integer A database schema is a collection of relation schemas.
Example: $PUBS$ database has relation schemas $BOOK$, $AUTHOR$, and $PUB$ (for publication, not public house) Relations and Databases A relation, or relation state, $r(R)$ is a set of tuples that conform to a relation schema $R$.</description></item><item><title>Sequences</title><link>https://DrCS.codes/professional-python/slides/sequences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/sequences/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets See the Python documentation for complete details.
By the end of this lesson you will
know how to use lists and tuples Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>Sets</title><link>https://DrCS.codes/discrete-math/slides/sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/discrete-math/slides/sets/</guid><description>Sets Sets Collection of elements.
Empty set: $\varnothing$ Integers: $\mathbb{Z}$ Natural numbers: $\mathbb{N}$ Real numbers: $\mathbb{R}$ Rational numbers: $\mathbb{Q}$ Cartesian Product ordered paris of elements from multiple sets
Subsets If $A \subseteq B$, then no element of $A$ is not in $B$.
Power Sets Powerset of $A$, $\mathcal{P}(A)$ is the set of all subsets of $A$. There are $2^{|A|}$ subsets of $A$.
Set Union Like OR. $A \cup B$ is a set of all elements of either $A$ or $B$.</description></item><item><title>SQL DDL and CRUD</title><link>https://DrCS.codes/data-manipulation/slides/sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/sql/</guid><description>SQL DDL and CRUD Structured Query Language Practical implementation of the relational model Originally SEQUEL (Structured English QEUry Language) at IBM research SQL became standard in 1986 Supported by all major RDBMS vendors, with minor (and sometimes major) differences SQL&amp;#39;s big advantage: if you stick to ANSI SQL, your database code is portable between RDBMS systems.
SQL Relational Model Relations are tables Tuples are rows Attributes are columns For the most part these terms are interchangeable.</description></item><item><title>Streams</title><link>https://DrCS.codes/java-oop/slides/streams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/streams/</guid><description>Streams Streams and Pipelines A stream is a sequence of elements.
Unlike a collection, it is not a data structure that stores elements. Unlike an iterator, streams do not allow modification of the underlying source A stream carries values from a source through a pipeline.
A pipeline contains the following components:
A source: This could be a collection, an array, a generator function, or an I/O channel. Zero or more intermediate operations.</description></item><item><title>String Fun</title><link>https://DrCS.codes/python/exercises/stringfun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/stringfun/</guid><description>String Fun Introduction In this assignment you will practice:
writing functions, documenting functions, and manipulating strings. Problem Description You enjoy word play and want to use Python
Solution Description Write a module called stringfun.py with the following functions:
def is_anagram(phrase1: str, phrase2: str) -&amp;gt; bool: &amp;#39;&amp;#39;&amp;#39;Returns True if phrase1 and phrase2 are anagrams. Phrases are anagrams if they contain the same letters (disregarding case) in the same numbers. &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;night&amp;#39;, &amp;#39;thing&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;young lady&amp;#39;, &amp;#39;An Old Guy&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;sassy mama&amp;#39;, &amp;#39;mama says&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;sassy mama&amp;#39;, &amp;#39;mama say&amp;#39;) False &amp;#39;&amp;#39;&amp;#39; def is_palindrome(phrase: str) -&amp;gt; bool: &amp;#39;&amp;#39;&amp;#39;Returns True if phrase is a palindrome, ignoring case, whitespace and punctuation.</description></item><item><title>Strings</title><link>https://DrCS.codes/professional-python/slides/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/strings/</guid><description>Strings Strings Three ways to define string literals:
with single quotes: &amp;#39;Ni!&amp;#39; double quotes: &amp;#34;Ni!&amp;#34; Or with triples of either single or double quotes, which creates a multi-line string:
&amp;gt;&amp;gt;&amp;gt; &amp;#34;&amp;#34;&amp;#34;I do HTML for them all, ... even made a home page for my dog.&amp;#34;&amp;#34;&amp;#34; &amp;#39;I do HTML for them all,\neven made a home page for my dog.&amp;#39; Strings Note that the REPL echoes the value with a \n to represent the newline character.</description></item><item><title>Student Emails</title><link>https://DrCS.codes/python/exercises/python/student-emails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/student-emails/</guid><description>Student Emails Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to extract all the student emails from a CSV class roster downloaded from T-Square.
Solution Description Write a program that reads a CSV student roster file such as super-roster.csv and prints the email addresses to the console.
Sample Output $ python student_emails.</description></item><item><title>Students</title><link>https://DrCS.codes/python/projects/students/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/students/</guid><description>Students Introduction In this assignment you&amp;rsquo;ll practice
writing classes, using datetime.date objects in Python, using objects, and transforming data comprised of objects. Problem Description You are writing a web application to manage a database of students.
Solution Description Write a module named students with the classes and functions specified below.
Required Classes and Functions Classes Student
Write a class called Student with the following instance variables:
id: str &amp;ndash; 9-digit student ID login: str &amp;ndash; login ID first_name: str last_name: str birth_date: datetime.</description></item><item><title>Text Utilities</title><link>https://DrCS.codes/python/exercises/textutil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/textutil/</guid><description>Text Utilities Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, doing arithmetic calculations, simple text processing, manipulating data structures and testing modules with doctest. Problem Description You need to do some text processing and decide to write a few utility functions to get started.
Solution Description Write a module named textutil with the functions specified below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>The Object Superclass</title><link>https://DrCS.codes/java-oop/slides/object-superclass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/object-superclass/</guid><description>The Object Superclass Fitting Classes Into the Java Hierarchy java.lang.Object defines several methods that are designed to be overriden in subclasses (JLS § 4.3.2:)
The method equals(Object) defines a notion of object equality, which is based on value, not reference, comparison. The method hashCode is very used together with equals(Object) in hashtables such as java.util.Hashmap. The method toString returns a String representation of the object. The method clone is used to make a duplicate of an object (don&amp;#39;t touch).</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/data-manipulation/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/scipy/</guid><description>SciPy Data Analytics/Scientific Computing Gaining insight from data:
Do instances fall into discernible groups?
Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
What is &amp;#34;data?&amp;#34; First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course. (Calculate grades for course.</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/professional-python/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/scipy/</guid><description>SciPy ** Data Analytics/Scientific Computing
Gaining insight from data:
Do instances fall into discernible groups? Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
** What is &amp;ldquo;data?&amp;rdquo;
First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course.</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/programming-python/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/scipy/</guid><description>SciPy ** Data Analytics/Scientific Computing
Gaining insight from data:
Do instances fall into discernible groups? Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
** What is &amp;ldquo;data?&amp;rdquo;
First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course.</description></item><item><title>Tides</title><link>https://DrCS.codes/python/projects/tides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/tides/</guid><description>Tides Introduction In this assignment you will practice writing Python command-line utilities, obtaining data, file I/O, processing CSV files, and using Python&amp;rsquo;s datetime module.
Problem Description You are a scuba diving instructor who plans dive trips to West Palm Beach, FL that include dives at the world famous Blue Heron Bridge. The Blue Heron Bridge is a shore dive that is best done at slack high tide, so planning is essential.</description></item><item><title>Tour of Python</title><link>https://DrCS.codes/professional-python/slides/tour-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/tour-python/</guid><description>Tour of Python In this lesson we&amp;rsquo;ll create two versions of a program that prints a table of corresponding Fahrenheit and Celsius temperatures. Along the way we&amp;rsquo;ll introduce
values and variables, control structures, functions, and Python scripts. Experienced programmers will be ready to begin writing Python programs after this lesson.
Astute readers who know C will recognize this example program from the first chapter of Kernighan and Ritchie&amp;rsquo;s classic The C Programming Language.</description></item><item><title>Treating People as Objects</title><link>https://DrCS.codes/python/exercises/people-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/people-objects/</guid><description>Exercise: Treating People as Objects Introduction In this exercise you will practice defining and using classes, and performing simple manipulations of collections of objects.
Problem Description You need to view some data about people in various ways.
Solution Description The people.py module has starter code that creates Person objects in a list peeps. In the people.py file:
Write a Person class with:
an __init__ method that takes: a name (str), a birthdate (str) formatted in ISO 8601 format, a height in cm (int), a weight in kilograms (float), a __repr__ method that returns a str like &amp;lt;name, birthdate, height, weight&amp;gt; field, e.</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/java-oop/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/java-oop/slides/values-variables/</guid><description>Values and Variables Values Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/professional-python/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/values-variables/</guid><description>Values and Variables Languages and Computation Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:(SICP 1.1)
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. By the end of this lession you will</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/programming-python/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/values-variables/</guid><description>Values and Variables Languages and Computation Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:(SICP 1.1)
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. By the end of this lession you will</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/python/exercises/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/values-variables/</guid><description>Values and Variables Introduction In this short exercise you will create a series of values and assign them to variables to solidify your knowledge of values, variables, operators, and types.
Solution Description For each of the comments below, write the specified Python code. You may do this in the Python interactive shell or by creating a Python script that you run from the command line or import into an interactive Python shell (which runs the code).</description></item><item><title>Water Temps Analysis</title><link>https://DrCS.codes/python/exercises/water-temps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/water-temps/</guid><description>Water Temperatures Analysis Introduction This is a short exercise to give you some practice with NumPy and Pandas.
Solution Description In a Python module named water_temps.py, load the data contained in the file south-atlantic-water-temps.csv into a Pandas DataFrame named water_temps. Use the first column in the data file as the index (row keys) for the data frame.
Add a column to the water_temps DataFrame with the name AVG and whose values are the average temperature for each location.</description></item><item><title>Web Scraping</title><link>https://DrCS.codes/data-manipulation/slides/web-scraping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/web-scraping/</guid><description>Web Scraping Web Scraping Two ways to mine data from the web
The hard way, by web scraping The easy way, using web service APIs We’ll see examples of both.
Web Scraping Web scraping, a.k.a. screen scraping, means getting data from a web page. Suppose we want to get the current wind data for a city from Open Weather Map.
What is a Web Page? A web page is a chunk of text containing HTML code.</description></item><item><title>Web Services</title><link>https://DrCS.codes/data-manipulation/slides/web-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/web-services/</guid><description> Web Services Requests http://docs.python-requests.org/en/master/</description></item><item><title>Word Histogram</title><link>https://DrCS.codes/python/projects/word-hist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/word-hist/</guid><description>Word Histogram Introduction In this homework you will practice
data structures, control structures, functional programming, and using modules that you learn on your own from documentation. Problem Descrtiption You&amp;rsquo;re a curious linguist with computer hacking skills and you want to see if Zipf&amp;rsquo;s Law holds for texts contained in files lying around on your disk.
Solution Description Write a Python module in word_hist.py that includes the following functions. You should copy these function declarations and docstrings verbatim to ensure that we can successfully autograde your submission.</description></item></channel></rss>