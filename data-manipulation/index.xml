<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Manipulation on Dr. CS codes</title><link>https://DrCS.codes/data-manipulation/</link><description>Recent content in Data Manipulation on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/data-manipulation/index.xml" rel="self" type="application/rss+xml"/><item><title>CSV Files</title><link>https://DrCS.codes/data-manipulation/slides/csv-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/csv-files/</guid><description>CSV Files &amp;#34;Comma&amp;#34;-Separated Values Files Say we have data in a comma-separated values file
$ cat capitals.dat # could be .dat, .csv, or anything Japan,Tokyo France,Paris Germany,Berlin U.S.A.,Washington, D.C Can use line-by-line file reading with the split() function we saw earlier to process comma-separated value files
$ python &amp;gt;&amp;gt;&amp;gt; capitals = {} # initialize a dictionary to hold our capitals data &amp;gt;&amp;gt;&amp;gt; for line in open(&amp;#39;capitals.dat&amp;#39;, &amp;#39;r&amp;#39;): # for each line in file .</description></item><item><title>Data Exchange Formats</title><link>https://DrCS.codes/data-manipulation/slides/data-exchange-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/data-exchange-formats/</guid><description>Data Exchange Formats Data Exchange Formats XML
A verbose textual representation of trees JSON
JavaScript Object notation – like a Python dict XML Format people.xml:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;people&amp;gt; &amp;lt;person&amp;gt; &amp;lt;firstName&amp;gt;Alan&amp;lt;/firstName&amp;gt; &amp;lt;lastName&amp;gt;Turing&amp;lt;/lastName&amp;gt; &amp;lt;professions&amp;gt; &amp;lt;profession&amp;gt;Computer Scientist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Mathematician&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Computer Scientist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Cryptographer&amp;lt;/profession&amp;gt; &amp;lt;/professions&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person&amp;gt; &amp;lt;firstName&amp;gt;Stephen&amp;lt;/firstName&amp;gt; &amp;lt;lastName&amp;gt;Hawking&amp;lt;/lastName&amp;gt; &amp;lt;professions&amp;gt; &amp;lt;profession&amp;gt;Physicist&amp;lt;/profession&amp;gt; &amp;lt;profession&amp;gt;Comedian&amp;lt;/profession&amp;gt; &amp;lt;/professions&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;/people&amp;gt; Parsing XML with ElementTree Use Python&amp;#39;s built-in ElementTree API
In [17]: import xml.etree.ElementTree as ET In [18]: root = ET.parse(&amp;#39;people.xml&amp;#39;) In [21]: persons = root.</description></item><item><title>Data Visualization in Python</title><link>https://DrCS.codes/data-manipulation/slides/python-dataviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/python-dataviz/</guid><description>Data Visualization Data Visualization :BMCOL:B_block: :BMCOL:B_block: Data graphics visually display measured quantities by means of the combined use of points, lines, a coordinate system, numbers, words, shading, and color.
– Edward Tufte, The Visual Display of Quantitative Information
Data Visualization in Python You already know basic concepts of visualization, and there are many courses that go in depth. Here we&amp;#39;ll learn how to manipulate the data and parameters of the visualizations available in the SciPy stack.</description></item><item><title>File IO</title><link>https://DrCS.codes/data-manipulation/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/file-io/</guid><description>File Input/Output Text File IO File IO is done in Python with the built-in File object which is returned by the built-in open function Use the &amp;#39;w&amp;#39; open mode for writing $ python &amp;gt;&amp;gt;&amp;gt; f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;w&amp;#34;) # open for writing, create if necessary &amp;gt;&amp;gt;&amp;gt; f.write(&amp;#34;Hello, file!\n&amp;#34;) # write string to file; notice \n ending &amp;gt;&amp;gt;&amp;gt; f.close() # close file, causing it to write to disk &amp;gt;&amp;gt;&amp;gt; exit() $ cat hello.</description></item><item><title>Flask</title><link>https://DrCS.codes/data-manipulation/slides/flask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/flask/</guid><description>Flask Flask Python&amp;#39;s built-in web server is nice, but serious web development is done using a web framework. Web frameworks typically provide:
Routes, which map URLs to server files or Python code Templates, which dynamically insert server-side data into pages of HTML Authentication and authorization of user names, passwords, permissions Sessions, which keep track of a user during a single visit to a site and more … We&amp;#39;ll use a simple Python web framework called Flask.</description></item><item><title>Getting Started</title><link>https://DrCS.codes/data-manipulation/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/getting-started/</guid><description>Getting Started These instructions are for installing the necessary tools and Python components for this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.7, pip, and venv.
Ubuntu/WSL2 If you are using Windows 10 or 11, install WSL2, the Windows Subsystem for Linux, Version 2. WSL2 provides a very nice Linux environment, including a full Linux kernel and distribution of your choosing (I will use the latest Ubuntu in demonstrations).</description></item><item><title>Lessons</title><link>https://DrCS.codes/data-manipulation/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/lessons/</guid><description>Lessons PfP means Python for Programmers TP means Think Python, 2nd Edition, by Allen B. Downey Session Topic Resources 1 Introduction to Data Manipulation Meet the Teacher
Video: Getting Started on macOS
Video: Getting Started on Windows/WSL2
Video: Getting Started on Linux
2 CSV Files IP 8
Structured Files Example Code
Exercise: Student Emails
Exercise: Tides
Exercise: Calculate Grades
3 Data Exchange Formats IP 8
XML Details
Python XML and Database APIs</description></item><item><title>NumPy</title><link>https://DrCS.codes/data-manipulation/slides/numpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/numpy/</guid><description>NumPy Numerical Python Provides efficient storage and operations on dense data buffers, i.e., arrays.
ndarray is the fundamental object Vectorized operations on arrays Broadcasting File IO amd memory-mapped files In [1]: import numpy as np NumPy Array Element Types Arrays have elements of homogeneous data type
In [2]: a = np.array([1, 2, 3.14]) In [3]: type(a) Out[3]: numpy.ndarray In [4]: a Out[4]: array([ 1. , 2. , 3.14]) In [5]: type(a[0]) Out[5]: numpy.</description></item><item><title>Pandas</title><link>https://DrCS.codes/data-manipulation/slides/pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/pandas/</guid><description>Pandas Pandas Built on NumPy Adds data structures and data manipulation tools Enables easier data cleaning and analysis import pandas as pd pd.set_option(&amp;#34;display.width&amp;#34;, 120) That last line allows you to display DataFrames with many columns without wrapping.
Pandas Fundamentals Three fundamental Pandas data structures:
Series - a one-dimensional array of values indexed by a pd.Index Index - an array-like object used to access elements of a Series or DataFrame DataFrame - a two-dimensional array with flexible row indices and column names Series from List In [4]: data = pd.</description></item><item><title>Python DB-API</title><link>https://DrCS.codes/data-manipulation/slides/python-db-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/python-db-api/</guid><description>Python Database API Database Programming in Python DB-API: https://www.python.org/dev/peps/pep-0249/ SQLite3 is built-in: import sqlite3 MySQL reguires third-party library
$ conda install pymysql ... $ python Python 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; import pymysql Key point: most database APIs, including Python&amp;#39;s DB-API, are simply ways of executing SQL statements and getting the results of SQL statements.</description></item><item><title>Relational Data Model</title><link>https://DrCS.codes/data-manipulation/slides/relational-dat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/relational-dat-model/</guid><description>Relational Data Model Relational Data Model A relation schema $R(A_a, ..., A_n)$ is a relation name $R$ and a list of attributes $A_1, ..., A_n$.
Each attribute $A_i$ is the name of a role played by some domain $D$.
Example: $AUTHOR(author\_id, first\_name, last\_name)$
$dom(A_1)$ (or $dom(author\_id)$) is integer A database schema is a collection of relation schemas.
Example: $PUBS$ database has relation schemas $BOOK$, $AUTHOR$, and $PUB$ (for publication, not public house) Relations and Databases A relation, or relation state, $r(R)$ is a set of tuples that conform to a relation schema $R$.</description></item><item><title>SQL DDL and CRUD</title><link>https://DrCS.codes/data-manipulation/slides/sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/sql/</guid><description>SQL DDL and CRUD Structured Query Language Practical implementation of the relational model Originally SEQUEL (Structured English QEUry Language) at IBM research SQL became standard in 1986 Supported by all major RDBMS vendors, with minor (and sometimes major) differences SQL&amp;#39;s big advantage: if you stick to ANSI SQL, your database code is portable between RDBMS systems.
SQL Relational Model Relations are tables Tuples are rows Attributes are columns For the most part these terms are interchangeable.</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/data-manipulation/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/scipy/</guid><description>SciPy Data Analytics/Scientific Computing Gaining insight from data:
Do instances fall into discernible groups?
Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
What is &amp;#34;data?&amp;#34; First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course. (Calculate grades for course.</description></item><item><title>Web Scraping</title><link>https://DrCS.codes/data-manipulation/slides/web-scraping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/web-scraping/</guid><description>Web Scraping Web Scraping Two ways to mine data from the web
The hard way, by web scraping The easy way, using web service APIs We’ll see examples of both.
Web Scraping Web scraping, a.k.a. screen scraping, means getting data from a web page. Suppose we want to get the current wind data for a city from Open Weather Map.
What is a Web Page? A web page is a chunk of text containing HTML code.</description></item><item><title>Web Services</title><link>https://DrCS.codes/data-manipulation/slides/web-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/data-manipulation/slides/web-services/</guid><description> Web Services Requests http://docs.python-requests.org/en/master/</description></item></channel></rss>