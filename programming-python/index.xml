<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Principles in Python on Dr. CS codes</title><link>https://DrCS.codes/programming-python/</link><description>Recent content in Programming Principles in Python on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/programming-python/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://DrCS.codes/programming-python/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/control-structures/</guid><description>% Control Structures
Structured Programming Any algorithm can be expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Repetition - loops We&amp;rsquo;ve already seen sequences of statements. Today we&amp;rsquo;ll learn selection (conditional execution), and repetition.
The if-else Statement Conditional execution:
if boolean_expression: # a single statement executed when boolean_expression is true else: # a single statement executed when boolean_expression is false boolean_expression is not enclosed in parentheses else: not required Example:</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/ipython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/ipython/</guid><description>% iPython
The SciPy Stack SciPy is a Python-based ecosystem of libraries and tools for scientific computing and data analytics
iPython Jupyter notebooks Numpy Pandas Matplotlib iPython is the primary way of interacting with the SciPy stack &amp;ndash; whether through the shell or a Jupyter notebook. It&amp;rsquo;s also a fantastic REPL.
iPython Two modes:
Interactive shell
Replacement for python REPL Jupyter notebook
Interactive web-based documents mixing text, executable code, graphics Before we proceed, make sure your computer is ready (OS shell):</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/modules-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/modules-programs/</guid><description>% Modules and Programs
Python Programs Python code organized in
modules, packages, and scripts. We&amp;rsquo;ve already used some modules, now we&amp;rsquo;ll learn what they are, how they&amp;rsquo;re orgainized in packages, and how to write Python programs that can be run on their own, not just entered in the Python command shell.
Importing Modules importing a module means getting names from the module into scope. When you import a module, you can access the modules components with the dot operator as in the previous example.</description></item><item><title/><link>https://DrCS.codes/programming-python/slides/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/strings/</guid><description>% Strings
Strings Three ways to define string literals:
with single quotes: &amp;lsquo;Ni!&amp;rsquo;
double quotes: &amp;ldquo;Ni!&amp;rdquo;
Or with triples of either single or double quotes, which creates a multi-line string:
&amp;gt;&amp;gt;&amp;gt; &amp;#34;&amp;#34;&amp;#34;I do HTML for them all, ... even made a home page for my dog.&amp;#34;&amp;#34;&amp;#34; &amp;#39;I do HTML for them all,\neven made a home page for my dog.&amp;#39; Strings Note that the REPL echoes the value with a \n to represent the newline character.</description></item><item><title>Classes and Objects</title><link>https://DrCS.codes/programming-python/slides/classes-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/classes-objects/</guid><description>Classes and Objects ** Python is Object-Oriented
Every value in Python is an object, meaning an instance of a class. Even values that are considered &amp;ldquo;primitive&amp;rdquo; in some other languages.
#+BEGIN_SRC python
type(1) &amp;lt;class &amp;lsquo;int&amp;rsquo;&amp;gt; #+END_SRC
** Class Definitions
#+BEGIN_SRC python class &amp;lt;class_name&amp;gt;(): #+END_SRC
~&amp;lt;class_name&amp;gt;~ is an identifier ~~ is a comma-separated list of superclasses. Can be empty, in which case ~object~ is implicit superclass ~~ is a non-empty sequence of statements A class definition creates a class object in much the same way that a function definition creates a function object.</description></item><item><title>Code</title><link>https://DrCS.codes/programming-python/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/code/</guid><description>Example Code Python Basics arguments.py calc.py data_structures.py fahrenheit_celsius_v1.py fahrenheit_celsius_v2.py grade_calc.py house.py scripters.csv Python Classes got.py student.py trooper.py</description></item><item><title>Data Structures</title><link>https://DrCS.codes/programming-python/slides/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/data-structures/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets This lecture just an overview. See the Python documentation for complete details.
Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>File IO</title><link>https://DrCS.codes/programming-python/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/file-io/</guid><description>File Input/Output ** Text File IO
File IO is done in Python with the built-in ~File~ object which is returned by the built-in ~open~ function Use the &amp;lsquo;w&amp;rsquo; open mode for writing #+BEGIN_SRC python $ python
f = open(&amp;ldquo;hello.txt&amp;rdquo;,&amp;ldquo;w&amp;rdquo;) # open for writing, create if necessary f.write(&amp;ldquo;Hello, file!\n&amp;rdquo;) # write string to file; notice \n ending f.close() # close file, causing it to write to disk exit() $ cat hello.</description></item><item><title>Function Design</title><link>https://DrCS.codes/programming-python/slides/function-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/function-design/</guid><description>Function Design Recipe Examples
What a few representative calls to the function look like in the Python REPL. Think from the function user&amp;rsquo;s perspective. Examples become doctests in the function&amp;rsquo;s docstring. Header
Parameter names and types Return type Description
Short paragraph (1 or 2 sentences) describing the function&amp;rsquo;s behavior. Body
Implement the algorithm (sequence of statements) that accomplishes the function&amp;rsquo;s task, deriving the function&amp;rsquo;s output (return value) and/or effect from the the function&amp;rsquo;s inputs (arguments).</description></item><item><title>Functional Programming</title><link>https://DrCS.codes/programming-python/slides/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/functional-programming/</guid><description>Functional Programming in Python ** Functional Features in Python
Functions are first class, meaning they can be
stored in variables and data structures passed as arguments to functions returned from functions ** Higher-Order Functions
A higher order function is a function that takes another function as a parameter or returns a function as a value. We&amp;rsquo;ve already used one:
#+BEGIN_SRC python
help(sorted) &amp;hellip; sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.</description></item><item><title>Functions</title><link>https://DrCS.codes/programming-python/slides/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/functions/</guid><description>Functions Functions A function is a reusable block of code. Functions
have names (usually), contain a sequence of statements, and return values, either explicitly or implicitly. We&amp;#39;ve already used several built-in functions. Today we will learn how to define our own.
Hello, Functions! We define a function using the def keyword:
&amp;gt;&amp;gt;&amp;gt; def greet(): ... print(&amp;#39;Hello&amp;#39;) ... (blank line tells Python shell you&amp;#39;re finished defining the function)
Once the function is defined, you can call it:</description></item><item><title>Getting Started</title><link>https://DrCS.codes/programming-python/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/getting-started/</guid><description>Getting Started These instructions are for installing and configuring the software used in this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.6, pip, and venv.
Install Python. Jump to the section matching the operating system you will be using to install Python:
macOS Windows Ubuntu/WSL Install and configure IntelliJ or PyCharm.</description></item><item><title>Introduction to Computing</title><link>https://DrCS.codes/programming-python/slides/intro-computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/intro-computing/</guid><description>Computing for Computing Professionals Many professionals use and even rely on computers, typically with a set software products that are tailored, or can be tailored to their needs.
Business leaders use word processors, presentation software, spreadsheets and project managers. Doctors use electronic health care records and appointment scheduling systems. Lawyers use word processors and specialized legal search engines. Accountants use accounting ledger software and spreadsheets. Photographers and Videographers use photo and video editing tools.</description></item><item><title>Introduction to Python</title><link>https://DrCS.codes/programming-python/slides/intro-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/intro-python/</guid><description>Introduction to Computing with Python Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>Lessons</title><link>https://DrCS.codes/programming-python/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/lessons/</guid><description>Course Materials PPP: Practical Programming: An Introduction to Computer Science Using Python 3.6, 3ed TP: Think Python, 2nd Edition, by Allen B. Downey Lessons # Slides Readings Exercises Projects Videos 0 Introduction to Programming Principles in Python Meet the Teacher
1 Introduction to Computing PPP 1, 2; TP 1
hw0
Introduction to Computing
2 Introduction to Programming in Python PPP 1, 2; TP 1
hw0
Install Python and PyCharm on macOS</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/programming-python/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/scipy/</guid><description>SciPy ** Data Analytics/Scientific Computing
Gaining insight from data:
Do instances fall into discernible groups? Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
** What is &amp;ldquo;data?&amp;rdquo;
First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course.</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/programming-python/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/programming-python/slides/values-variables/</guid><description>Values and Variables Languages and Computation Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:(SICP 1.1)
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. By the end of this lession you will</description></item></channel></rss>