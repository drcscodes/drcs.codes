#+TITLE: Python DB-API
#+AUTHOR: Data Manipulation in Python
#+EMAIL:
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:2 toc:nil num:t
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+LaTeX_HEADER: \usepackage{verbatim, multicol, tabularx,}
#+LaTeX_HEADER: \usepackage{amsmath,amsthm, amssymb, latexsym, listings, qtree}
#+LaTeX_HEADER: \lstset{frame=tb, aboveskip=1mm, belowskip=0mm, showstringspaces=false, columns=flexible, basicstyle={\scriptsize\ttfamily}, numbers=left, frame=single, breaklines=true, breakatwhitespace=true}
#+LaTeX_HEADER: \setbeamertemplate{footline}[frame number]
#+LaTeX_HEADER: \hypersetup{colorlinks=true,urlcolor=blue}
#+LaTeX_HEADER: \logo{\includegraphics[height=.75cm]{GeorgiaTechLogo-black-gold.png}}

* Python Database API

** Database Programming in Python

- DB-API: [[https://www.python.org/dev/peps/pep-0249/][https://www.python.org/dev/peps/pep-0249/]]
- SQLite3 is built-in: ~import sqlite3~
- MySQL reguires third-party library

  #+BEGIN_SRC sh
  $ conda install pymysql
  ...
  $ python
  Python 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00)
  [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import pymysql
  #+END_SRC

Key point: most database APIs, including Python's DB-API, are simply ways of executing SQL statements and getting the results of SQL statements. You can't use DB-API without knowing SQL.

** Working With Databases

- A connection objects represent a connection to a database

  #+BEGIN_SRC python
  connection = pymysql.connect(...)
  #+END_SRC

- Cursor object is a stateful pointer to a part of the database

  #+BEGIN_SRC python
  cursor = connection.cursor()
  #+END_SRC


- SQL Statements are submitted to cursor's ~execute()~ method

  – ~execute~ returns the number of rows in the statement's result

    #+BEGIN_SRC python
    >>> cursor.execute('insert into table values (%s, %s)', ('field1', 'field2'))
    1
    #+END_SRC

  – If the statement was a select, then the cursor points at the first row of the result

    - The cursor object is an iterator over the results (preferred method)
    - ~fetchall()~ , ~fetchone()~ , etc. return results in Python data structures

    #+BEGIN_SRC python
    >>> cursor.execute('select * from table where column1 = %s', ('field1'))
    1
    >>> for row in cursor: print(row)
    {'column1': 'field1', 'column2': 'field'2'}
    #+END_SRC


** Connecting to a MySQL Database

If you configured your MySQL server without a root password, this will work:

#+BEGIN_SRC python
>>> import pymysql
>>> connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='',
                                 db='pubs',
                                 charset='utf8mb4',
                                 cursorclass=pymysql.cursors.DictCursor)
#+END_SRC

- Substitute your own root password if you have one
- Notice that the cursor class id ~DictCursor~ - pymysql will return rows of dabases as dictionaries

** Inserting Data into a Database Table

#+BEGIN_SRC python
>>> cursor = connection.cursor()
>>> cursor.execute('insert into author values (%s, %s, %s)', (10, 'Jenny', 'McCarthy'))
1
#+END_SRC

To get the primary key of the row you just inserted, use ~cursor.lastrowid~.  This is especially helpful for getting the id of an ~AUTO_INCREMENT~ primary key.



** Executing Queries on a MySQL Database

#+BEGIN_SRC python
>>> cursor = connection.cursor()
>>> query = "select * from author where last_name = %s"
>>> cursor.execute(query, ('McCarthy'))
2
>>> for row in cursor: print(row)
{'author_id': 1, 'first_name': 'John', 'last_name': 'McCarthy'}
{'author_id': 10, 'first_name': 'Jenny', 'last_name': 'McCarthy'}
#+END_SRC

- In the query string, use placeholders with same syntax as ~%~ - based string interpolation
- In call to ~cursor.execute~, supply values for placeholders in a tuple.
- After calling ~cursor.execute~, cursor is an iterator over the result rows.
