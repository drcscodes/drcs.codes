#+TITLE: Values and Variables
#+AUTHOR:
#+EMAIL:
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:2 toc:nil ':nil
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller, aspectratio=1610]
#+LaTeX_HEADER: \setbeamertemplate{navigation symbols}{}
#+LaTeX_HEADER: \usepackage{verbatim, multicol, tabularx}
#+LaTeX_HEADER: \usepackage{sourcecodepro}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{amsmath,amsthm, amssymb, latexsym, listings, qtree}
#+LaTeX_HEADER: \lstset{extendedchars=\true, inputencoding=utf8, frame=tb, aboveskip=1mm, belowskip=0mm, showstringspaces=false, columns=fixed, basicstyle={\footnotesize\ttfamily}, numbers=left, frame=single, breaklines=true, breakatwhitespace=true, tabsize=4,  keywordstyle=\color{blue}, identifierstyle=\color{violet}, stringstyle=\color{teal}, commentstyle=\color{darkgray}}
#+LaTeX_HEADER: \setbeamertemplate{footline}[frame number]
#+LaTeX_HEADER: \hypersetup{colorlinks=true,urlcolor=blue,bookmarks=true}
#+LaTeX_HEADER: \setlength{\parskip}{.25\baselineskip}
# #+LaTeX_HEADER: \logo{\includegraphics[height=.75cm]{GeorgiaTechLogo-black-gold.png}}


* Values and Variables

** Languages and Computation

Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:([[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html][SICP 1.1]])

- *primitive expressions*, which represent the simplest entities the language is concerned with,
- *means of combination*, by which compound elements are built from simpler ones, and
- *means of abstraction*, by which compound elements can be named and manipulated as units.

Today we'll begin learning Python's facilities for primitive expresions, combination, and elementary abstraction.

** Values

#+ATTR_LATEX: :height .7\textheight
[[../../images/value-uga-shirt.jpeg]]

** Expressions

- value :: a well-defined chunk of data in memory
- expression :: a sequence of symbols that can be *evaluated* to produce a value

When you an expression into the Python REPL, Python evaluates it and prints its value.

#+begin_src python
>>> 1
1
>>> 3.14
3.14
>>> "pie"
'pie'
#+end_src

The simplest expressions are *literal* values, as in the examples above.

- literal :: a textual representation of a value in source code.

Compound expressions combine values using operators.  Here the ~+~ operator combines the two literal values ~2~ and ~3~ -- the *operands* -- to produce the value ~5~:

#+begin_src python
>>> 2 + 3
5
#+end_src

Have a Python REPL session open for this lesson so you can follow along and try your own ideas.

** Types

You can think of a type
- structurally: as an interpretation of the bits comprising a chunk of data,
- denotationally: as a set of values, or
- abstraction-based: as the set of operations available for a type.

All values have types. Python can tell you the type of a value with the built-in ~type~ function:

#+begin_src python
>>> type(1)
<class 'int'>
>>> type(3.14)
<class 'float'>
>>> type("pie")
<class 'str'>
#+end_src

- What's the type of ~'1'~?

** Variables

Think of variable as a name for a value. You bind a value to a variable using an assignment statement (or by passing an argument to a function), after which the variable *denotes* the value:

#+begin_src python
>>> a = "Ok"
>>> a
'Ok'
#+end_src

~=~ is the assignment operator.  An assignment statement has the form:

#+begin_quote
    ~<variable_name> = <expression>~
#+end_quote

You can unbind a variable with the ~del~ function.

#+begin_src python
>>> del(a)
>>> a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
#+end_src

Variable names, or identifiers, may contain letters, numbers, or underscores and may not begin with a number.

- What happens when you execute this assignment statement?

#+begin_src python
>>> 16_candles = "Molly Ringwald"
#+end_src

** Keywords

Python reserves some identifiers for its own use.

#+begin_src python
False      class      finally    is         return
None       continue   for        lambda     try
True       def        from       nonlocal   while
and        del        global     not        with
as         elif       if         or         yield
assert     else       import     pass
break      except     in         raise
#+end_src


- What happens when you execute this assignment statement?

#+begin_src python
>>> class = "CS 2316"
#+end_src


- What happens if you use ~print~ as a variable name?
- How can you fix it?

** Assignment Semantics

~=~ stores the memory address of the value on the right-hand side in a memory cell referenced by the variable on the left hand side.  Python variables refer to these pointer memory cells. Evaluate these assignment statements in a Python REPL and make sure you understand them.

***                                                                                               :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: block
    :END:

#+begin_src python
a = 1
b = 2
#+end_src

#+name: assignment-semantics1
#+begin_src ditaa :cmdline --no-separation :file diagrams/assignment-semantics1.png
               addr1
          +-----+-------+
 +-----+  | int |       |
a|addr1+->+-----+       |
 +-----+  +      1      |
          +-------------+

               addr2
          +-----+-------+
 +-----+  | int |       |
b|addr2+->+-----+       |
 +-----+  +      2      |
          +-------------+
#+end_src

#+ATTR_LATEX: :width 1.75in
#+RESULTS: assignment-semantics1
[[file:diagrams/assignment-semantics1.png]]

*** 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:

#+begin_src python
a = b
#+end_src

#+name: assignment-semantics2
#+begin_src ditaa :cmdline --no-separation :file diagrams/assignment-semantics2.png
               addr1
          +-----+-------+
 +-----+  | int |       |
a|addr2+  +-----+       |
 +-----+  +      1      |
       |  +-------------+
       |
       \--\
          |
          V    addr2
          +-----+-------+
 +-----+  | int |       |
b|addr2+->+-----+       |
 +-----+  +      2      |
          +-------------+
#+end_src

#+ATTR_LATEX: :width 1.75in
#+RESULTS: assignment-semantics2
[[file:diagrams/assignment-semantics2.png]]

*** 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: block
    :BEAMER_envargs: <3->
    :END:

#+begin_src python
b = 42
#+end_src

#+name: assignment-semantics3
#+begin_src ditaa :cmdline --no-separation :file diagrams/assignment-semantics3.png
               addr1
          +-----+-------+
 +-----+  | int |       |
a|addr2+  +-----+       |
 +-----+  +      1      |
       |  +-------------+
       \--\
          |
          V    addr2
          +-----+-------+
 +-----+  | int |       |
b|addr3+  +-----+       |
 +-----+  +      2      |
       |  +-------------+
       \--\
          |
          V    addr3
          +-----+-------+
          | int |       |
          +-----+       |
          +      42     |
          +-------------+
#+end_src

#+ATTR_LATEX: :width 1.75in
#+RESULTS: assignment-semantics3
[[file:diagrams/assignment-semantics3.png]]

** Types as Interpretations of Bits

You can represent the byte ~01000001~ with ~b'\x41'~.  ~\x~ means the characters that follow are hexadecimal digits. You will probably never do this sort of thing in Python.  These examples simply illustrate what we mean by viewing types as interpretations of bits.


***                                                                                               :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.55
    :BEAMER_env: block
    :END:

If you interpret those bits as an ~int~ you get:

#+ATTR_LATEX: :options basicstyle=\ttfamily\scriptsize
#+begin_src python
>>> n = int.from_bytes(b'\x41', byteorder='little')
>>> n
65
#+end_src

#+name: type-bits-int
#+begin_src ditaa :cmdline --no-separation :file diagrams/type-bits-int.png
               addr1
          +-----+-------+
 +-----+  | int |       |
n|addr1+->+-----+       |
 +-----+  +   01000001  |
          +-------------+
#+end_src

#+ATTR_LATEX: :width 1.75in
#+RESULTS: type-bits-int
[[file:diagrams/type-bits-int.png]]

*** 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:


If you interpret the same bits as a ~str~:

#+ATTR_LATEX: :options basicstyle=\ttfamily\scriptsize
#+begin_src python
>>> s = str(b'\x41', encoding='utf-8')
>>> s
'A'
#+end_src

#+name: type-bits-str
#+begin_src ditaa :cmdline --no-separation :file diagrams/type-bits-str.png
               addr2
          +-----+-------+
 +-----+  | str |       |
s|addr2+->+-----+       |
 +-----+  +   01000001  |
          +-------------+
#+end_src

#+ATTR_LATEX: :width 1.75in
#+RESULTS: type-bits-str
[[file:diagrams/type-bits-str.png]]


** Types as Sets of Values

- ~int~ is like the set of integers, $\mathbb{Z}$.
- ~float~ is like the set of real numbers, $\mathbb{R}$.
- ~bool~ is the finite set of values ~True~ and ~False~.
- ~str~ is the set of all sequences of characters from the UTF-8 character set.

Again, this is not terribly useful in Python unless you want to think of compound expressions in set theoretic terms.

** Aside: The Sizes of Types

One of the convenient things about Python is that you don't have to worry about overflow or underflow[fn:1]. For example, as in mathematics, the set ~int~ is unbounded:

#+begin_src python
>>> import sys
>>> x = sys.maxsize
>>> x
9223372036854775807 # That's ~ 9.2 quintillion, i.e., 9.2e+18
>>> x = x + 1
>>> x
9223372036854775808
>>>
#+end_src

But you should consider ~sys.maxsize~, the word size of your processor (64 bits in this example, since ~sys.maxsize~ $= 2^{63} - 1$), to be the practical limit, because it's the theoretical limit [fn:2] of addressable RAM and thus the largest possible (but certainly impractical) array you could store in main memory and therefore, as you'll learn later, the largest possible list index.


[fn:1] In regular Python you don't have to worry about type size limits, but in scientific Python, which relies on libraries written in C, C++ and Fortran you do.
[fn:2] Not strictly true, but practically true.

** Types as Sets of Operations

Types determine which operations are available on values. For example, exponentiation is defined for numbers (like int or float):


#+begin_src python
>>> 2**3
8
#+end_src


... but not for ~str~ (string) values:


#+begin_src python
>>> "pie"**3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
#+end_src


This is the primary way to think about types in Python.

** Overloaded Operators

Some operators are overloaded, meaning they have different meanings when applied to different types. For example, + means addition for numbers and concatenation for strings:

#+begin_src python
>>> 2 + 2
4
>>> "Yo" + "lo!"
'Yolo!'
#+end_src

~*~ means multiplication for numbers and repetition for strings:

#+begin_src python
>>> 2 * 3
6
>>> "Yo" * 3
'YoYoYo'
>>> 3 * "Yo"
'YoYoYo'
#+end_src

** Expression Evaluation

Mathematical expressions are evaluated using precedence and associativity rules as you would expect from math:

#+begin_src python
>>> 2 + 4 * 10
42
#+end_src

If you want a different order of operations, use parentheses:

#+begin_src python
>>> (2 + 4) * 10
60

#+end_src

Note that precedence and associativity rules apply to overloaded versions of operators as well:

#+begin_src python
>>> "Honey" + "Boo" * 2
'HoneyBooBoo'
#+end_src

- How could we modify the expression above to evaluate to 'HoneyBooHoneyBoo' ?

** Python is Dynamically Typed

Python is dynamically typed, meaning that types are not resoved until run-time. This means two things practically:

1. Values have types, variables don't:
   #+begin_src python
   >> a = 1
   >>> type(a)
   <class 'int'>
   >>> a = 1.1 # would be disallowed in a statically typed language
   >>> type(a)
   <class 'float'>
   #+end_src
2. Python doesn't report type errors until run-time. We'll see many examples of this fact.

Evaluate the following expressions in the Python REPL.  Be sure to type them exactly as written.

- ~2 + 3~
- ~'2' + '3'~
- ~'2' + 3~
- ~2 + '3'~

** Type Conversions

Convert a value to a different type by applying conversions named after the target type.

#+begin_src python
>>> int(2.9)
2
>>> float(True)
1.0
>>> int(False)
0
>>> str(True)
'True'
>>> int("False")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'False'
#+end_src

Modify the following expressions to produce the indicated results.

- ~'2' + 3~ (we want ~'23'~)
- ~2 + '3'~ (we want ~5~)

** Assignment Semantics

Python evaluates the expression on the right-hand side, then binds the expression's value to the variable on the left-hand side. Variables can be reassigned:

#+begin_src python
>>> a = 'Littering and ... '
>>> a
'Littering and ... '
>>> a = a * 2
>>> a
'Littering and ... Littering and ... '
>>> a = a * 2
>>> a              # I'm freakin' out, man!
'Littering and ... Littering and ... Littering and ... Littering and ... '
#+end_src

Note that the value of ~a~ used in the expression on the right hand side is the value it had before the assignment statement.

What's the type of ~a~?

** Boolean Values

There are 10 kinds of people:

- those who know binary, and
- those who don't.

** Python Booleans

In Python, boolean values have the ~bool~ type. Four kinds of boolean
expressions:

- ~bool~ literals: ~True~ and ~False~
- ~bool~ variables
- expressions formed by combining non-~bool~ expressions with comparison operators
- expressions formed by combining ~bool~ expressions with logical operators

** Boolean Expressions

*** Comparison operators:

- Equal to: ~==~, like $=$ in math

    - Remember, ~=~ is assignment operator, ~==~ is comparison operator!

- Not equal to: ~!=~, like $\ne$ in math
- Greater than: ~>~, like $>$ in math
- Greater than or equal to: ~>=~, like $\ge$ in math

#+begin_src python
1 == 1 # True
1 != 1 # False
1 >= 1 # True
1 > 1  # False
#+end_src

*** Logical operators:

#+begin_src python
True and True  # True
True and False # False
True or False  # True
False or False # False
not True       # False
#+end_src


- What is the value of ~"foo" == "Foo"~?
- What is the value of ~"foo" > "Foo"~?

** Truth in Python

The zero values of built-in types are equivalent to ~False~:

- boolean ~False~
- ~None~
- integer ~0~
- float ~0.0~
- empty string ~""~
- empty list ~[]~
- empty tuple ~()~
- empty dict ~{}~
- empty set ~set()~

All other values are equivalent to True.

- Every value in Python is either *truthy* or *falsey* and can be used in a boolean context.

** Short-circuit Evaluation

Logical expressions use short-circuit evaluation:

- ~or~ only evaluates second operand if first operand is ~False~
- ~and~ only evaluates second operand if first operand is ~True~

What are the values of the following expressions?

- ~True and False~
- ~True and 0~
- ~True and []~
- ~True and None~
- ~type(True and None)~
- ~False or 1~
- ~True or 1~
- ~1 and "done"~
- ~1 == 1 or 0~
- ~1 == 1 and 0~
- ~1 == (1 and 0)~


Guard idiom: ~(b == 0) or print(a / b)~, or ~(b != 0) and print(a / b)~

** Values, Variables, and Expression

- Values are the atoms of computer programs
- Expressions produce values
- We combine values using operators and functions to form compound expressions
- Variables are identifiers that denote values
  - Identifiers also denote functions, classes, modules and packages
- Choose identifiers carefully to create beautiful, readable programs
