#+TITLE: Strings
#+AUTHOR:
#+EMAIL:
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:2 toc:nil ':nil
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller, aspectratio=1610]
#+LaTeX_HEADER: \setbeamertemplate{navigation symbols}{}
#+LaTeX_HEADER: \usepackage{verbatim, multicol, tabularx}
#+LaTeX_HEADER: \usepackage{sourcecodepro}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{amsmath,amsthm, amssymb, latexsym, listings, qtree}
#+LaTeX_HEADER: \lstset{extendedchars=\true, inputencoding=utf8, frame=tb, aboveskip=1mm, belowskip=0mm, showstringspaces=false, columns=fixed, basicstyle={\footnotesize\ttfamily}, numbers=left, frame=single, breaklines=true, breakatwhitespace=true, tabsize=4,  keywordstyle=\color{blue}, identifierstyle=\color{violet}, stringstyle=\color{teal}, commentstyle=\color{darkgray}, upquote=false, literate={'}{\textquotesingle}1}
#+LaTeX_HEADER: \setbeamertemplate{footline}[frame number]
#+LaTeX_HEADER: \hypersetup{colorlinks=true,urlcolor=blue,bookmarks=true}
#+LaTeX_HEADER: \setlength{\parskip}{.25\baselineskip}
# #+LaTeX_HEADER: \logo{\includegraphics[height=.75cm]{GeorgiaTechLogo-black-gold.png}}


* Strings

** Strings

Three ways to define string literals:

- with single quotes: 'Ni!'

- double quotes: "Ni!"

- Or with triples of either single or double quotes, which creates a multi-line string:

    #+begin_src Python
    >>> """I do HTML for them all,
    ... even made a home page for my dog."""
    'I do HTML for them all,\neven made a home page for my dog.'
    #+end_src

** Strings

Note that the REPL echoes the value with a ~\n~ to represent the newline character. Use the print function to get your intended output:

#+begin_src python
>>> nerdy = """I do HTML for them all,
... even made a home page for my dog."""
>>> nerdy
'I do HTML for them all,\neven made a home page for my dog.'
>>> print(nerdy)
I do HTML for them all,
even made a home page for my dog.
#+end_src

That's pretty [[http://bravehunde.org][nerdy]].

** Strings

Choice of quote character is usually a matter of taste, but the choice can sometimes buy convenience. If your string contains a quote character you can either escape it:

#+begin_src python
>>> journey = 'Don\'t stop believing.'
#+end_src

or use the other quote character:

#+begin_src python
>>> journey = "Don't stop believing."
#+end_src

*** Active Review

- How does Python represent the value of the variable ~journey~, that is, how is it echoed by the REPL?

** String Operations

Because strings are sequences we can get a string's length with ~len()~:

#+begin_src python
>>> i = "team"
>>> len(i)
4
#+end_src

and access characters in the string by index (offset from beginning â€“ first index is 0) using ~[]~:

#+begin_src python
>>> i[1]
'e'
#+end_src

Note that the result of an index access is a string:

#+begin_src python
>>> type(i[1])
<class 'str'>
>>> i[3] + i[1]
'me'
>>> i[-1] + i[1] # Note that a negative index goes from the end
'me'
#+end_src

*** Active Review

- What is the index of the first character of a string?
- What is the index of the last character of a string?

** String Slicing

~[:end]~ gets the first characters up to but not including ~end~

#+begin_src python
>>> al_gore = "manbearpig"
>>> al_gore[:3]
'man'
#+end_src

~[begin:end]~ gets the characters from ~begin~ up to but not including end

#+begin_src python
>>> al_gore[3:7]
'bear'
#+end_src

~[begin:]~ gets the characters from ~begin~ to the end of the string

#+begin_src python
>>> al_gore[7:]
'pig'
>>>
#+end_src

*** Active Review

- What is the relationship between the ending index of a slice and the beginning index of a slice beginning right after the first slice?

** String Methods

~str~ is a class (you'll learn about classes later) with many methods (a method is a function that is part of an object). Invoke a method on a string using the dot operator.

~str.find(substr)~ returns the index of the first occurence of
~substr~ in ~str~

#+begin_src python
>>> 'foobar'.find('o')
1
#+end_src

*** Active Review

- Write a string slice expression that returns the username from an email address, e.g., for 'bob@aol.com' it returns 'bob'.
- Write a string slice expression that returns the host name from an email address, e.g., for 'bob@aol.com' it returns 'aol.com'.

** String Interpolation with %

The old-style (2.X) string format operator, %, takes a string with format
specifiers on the left, and a single value or tuple of values on the right,
and substitutes the values into the string according to the conversion
rules in the format specifiers. For example:

#+begin_src Python
>>> "%d %s %s %s %f" % (6, 'Easy', 'Pieces', 'of', 3.14)
'6 Easy Pieces of 3.140000'
#+end_src

Here are the conversion rules:

- %s string
- %d decimal integer
- %x hex integer
- %o octal integer
- %f decimal float
- %e exponential float
- %g decimal or exponential float
- %% a literal

** String Formatting with ~%~

Specify field widths with a number between ~%~ and conversion rule:

#+begin_src Python
>>> sunbowl2012 = [('Georgia Tech', 21), ('USC', 7)]
>>> for team in sunbowl2012:
...     print('%14s %2d' % team)
...
Georgia Tech 21
USC           7
#+end_src
Fields right-aligned by default. Left-align with - in front of field width:

#+begin_src Python
>>> for team in sunbowl2012:
...     print('%-14s %2d' % team)
...
Georgia Tech 21
USC           7
#+end_src

Specify n significant digits for floats with a .n after the field width:

#+begin_src Python
>>> '%5.2f' % math.pi
' 3.14'
#+end_src
Notice that the field width indludes the decimal point and output is
left-padded with spaces

** String Interpolation with ~str.format()~

Python 3.0 - 3.5 interpolation was done with the string method ~format~:

#+begin_src Python
>>> "{} {} {} {} {}".format(6, 'Easy', 'Pieces', 'of', 3.14)
'6 Easy Pieces of 3.14'
#+end_src

Old-style formats only resolve arguments by position. New-style
formats can take values from any position by putting the position
number in the {} (positions start with 0):

#+begin_src Python
>>> "{4} {3} {2} {1} {0}".format(6, 'Easy', 'Pieces', 'of', 3.14)
'3.14 of Pieces Easy 6'
#+end_src

Can also use named arguments, like functions:

#+begin_src Python
>>> "{count} pieces of {kind} pie".format(kind='punkin', count=3)
'3 pieces of punkin pie'
#+end_src

Or dictionaries (note that there's one dict argument, number 0):

#+begin_src Python
>>> "{0[count]} pieces of {0[kind]} pie".format({'kind':'punkin',
'count':3})
'3 pieces of punkin pie'
#+end_src

** String Formatting with ~str.format()~

Conversion types appear after a colon:

#+begin_src Python
>>> "{:d} {} {} {} {:f}".format(6, 'Easy', 'Pieces', 'of', 3.14)
'6 Easy Pieces of 3.140000'
#+end_src

Argument names can appear before the :, and field formatters appear
between the : and the conversion specifier (note the < and > for left
and right alignment):

#+begin_src Python
>>> for team in sunbowl2012:
...     print('{:<14s} {:>2d}'.format(team[0], team[1]))
...
Georgia Tech 21
USC           7
#+end_src

You can also unpack the tuple to supply its elements as individual
arguments to format (or any function) by prepending tuple with *:

#+begin_src Python
>>> for team in sunbowl2012:
...     print('{:<14s} {:>2d}'.format(*team))
...
Georgia Tech 21
USC           7
#+end_src

** f-Strings

Python 3.6 introduced a much more convenient inline string interpolator.  Prepend ~f~ to the opening quote, enclose arbitrary Python expressions in culy braces (~{}~), and put formatters similar to ~str.format()~ after colons.

#+begin_src Python
>>> for team, score in sunbowl2012:       # Tuple-unpacking assignment
...     print(f'{team:<14s} {score:>2d}')
...
Georgia Tech   21
USC             7
#+end_src

** Conclusion

- Strings are a kind of ~Sequence~
- Unlike some other languages, it's not a ~Sequence[char]~ -- single characters are also ~str~ s
- Strings are immutable, so operations that "modify" strings actually return new strings containing the modificaitons
