<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Professional Python on Dr. CS codes</title><link>https://DrCS.codes/professional-python/</link><description>Recent content in Professional Python on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/professional-python/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://DrCS.codes/professional-python/slides/ipython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/ipython/</guid><description>% iPython
The SciPy Stack SciPy is a Python-based ecosystem of libraries and tools for scientific computing and data analytics
iPython Jupyter notebooks Numpy Pandas Matplotlib iPython is the primary way of interacting with the SciPy stack &amp;ndash; whether through the shell or a Jupyter notebook. It&amp;rsquo;s also a fantastic REPL.
iPython Two modes:
Interactive shell
Replacement for python REPL Jupyter notebook
Interactive web-based documents mixing text, executable code, graphics Before we proceed, make sure your computer is ready (OS shell):</description></item><item><title>Classes and Objects</title><link>https://DrCS.codes/professional-python/slides/classes-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/classes-objects/</guid><description>Python is Object-Oriented Every value in Python is an object, meaning an instance of a class. Even values that are considered &amp;ldquo;primitive&amp;rdquo; in some other languages.
&amp;gt;&amp;gt;&amp;gt; type(1) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; Class Definitions class &amp;lt;class_name&amp;gt;(&amp;lt;superclasses&amp;gt;): &amp;lt;body&amp;gt; &amp;lt;class_name&amp;gt; is an identifier &amp;lt;superclasses&amp;gt; is a comma-separated list of superclasses. Can be empty, in which case object is implicit superclass &amp;lt;body&amp;gt; is a non-empty sequence of statements A class definition creates a class object in much the same way that a function definition creates a function object.</description></item><item><title>Code</title><link>https://DrCS.codes/professional-python/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/code/</guid><description>Example Code analytics cool-new-title.ipynb exam1grades.ipynb exam1grades.png exam1grades.txt funcalc.py gtri-anon-salaries.csv hotjobs.py sakila-grades.csv sakila-grades.ipynb sakila-grades.org salary_comp.ipynb spreadsheet.py super-grades.csv super_grades.ipynb tides.ipynb water_temps.md wpb-tides-2017.txt basics arguments.py calc.py data_structures.py fahrenheit_celsius_v1.py fahrenheit_celsius_v2.py grade_calc.py house.py scopes.py scripters.csv classes got.py student.py trooper.py databases database.sql dorms.sql got-data.sql got-schema.sql load_people.py people-create.sql people.py people.xml popdb.py pubs-data.sql pubs-schema.sql query-dorms.sql query-pubs.sql gui button.py counter.py csv_gui.py guido400x400.jpg helloqt.py label.py larry500x500.jpg mats500x500.jpg message_box.py mysql_browser.py quitter.py scripters_gui.py sqlite_browser.py todo.py tooltips.py hanglib draw.py words.py structured-files alanturing.xml bdays.json cap_reader.</description></item><item><title>Control Structures</title><link>https://DrCS.codes/professional-python/slides/control-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/control-structures/</guid><description>Control Structures Structured Programming Any algorithm can be expressed by:
Sequence - one statement after another Selection - conditional execution (not conditional jumping) Repetition - loops We&amp;#39;ve already seen sequences of statements. Today we&amp;#39;ll learn selection (conditional execution), and repetition.
The if-else Statement Conditional execution:
if boolean_expression: # a single statement executed when boolean_expression is true else: # a single statement executed when boolean_expression is false boolean_expression is not enclosed in parentheses else: not required Example:</description></item><item><title>Data Structures</title><link>https://DrCS.codes/professional-python/slides/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/data-structures/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets This lecture just an overview. See the Python documentation for complete details.
Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>Dictionaries and Sets</title><link>https://DrCS.codes/professional-python/slides/dictionaries-sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/dictionaries-sets/</guid><description>Dictionaries and Sets Dictionaries and Sets Dictionaries map keys to values Sets represent mathematical sets Byt the end of this lesson you will
know how to use dictionaries know jow to use sets Dictionaries A dictionary is a map from keys to values.
Create dictionaries with {}
&amp;gt;&amp;gt;&amp;gt; capitals = {} Add key-value pairs with assignment operator
&amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Georgia&amp;#39;] = &amp;#39;Atlanta&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Alabama&amp;#39;] = &amp;#39;Montgomery&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals {&amp;#39;Georgia&amp;#39;: &amp;#39;Altanta&amp;#39;, &amp;#39;Alabama&amp;#39;: &amp;#39;Montgomery&amp;#39;} Keys are unique, so assignment to same key updates mapping</description></item><item><title>Expressions</title><link>https://DrCS.codes/professional-python/slides/expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/expressions/</guid><description>Languages and Computation Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:(SICP 1.1)
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. In the last lesson we learned about values and variables, and introduced compound expressions.</description></item><item><title>File IO</title><link>https://DrCS.codes/professional-python/slides/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/file-io/</guid><description>File Input/Output Text File IO File IO is done in Python with the built-in File object which is returned by the built-in open function Use the &amp;#39;w&amp;#39; open mode for writing $ python &amp;gt;&amp;gt;&amp;gt; f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;w&amp;#34;) # open for writing, create if necessary &amp;gt;&amp;gt;&amp;gt; f.write(&amp;#34;Hello, file!\n&amp;#34;) # write string to file; notice \n ending &amp;gt;&amp;gt;&amp;gt; f.close() # close file, causing it to write to disk &amp;gt;&amp;gt;&amp;gt; exit() $ cat hello.</description></item><item><title>Functional Programming in Python</title><link>https://DrCS.codes/professional-python/slides/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/functional-programming/</guid><description>Functional Features in Python Functions are first class, meaning they can be
stored in variables and data structures passed as arguments to functions returned from functions Higher-Order Functions A higher order function is a function that takes another function as a parameter or returns a function as a value. We&amp;rsquo;ve already used one:
&amp;gt;&amp;gt;&amp;gt; help(sorted) ... sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.</description></item><item><title>Functions</title><link>https://DrCS.codes/professional-python/slides/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/functions/</guid><description>Functions Functions A function is a reusable block of code. Functions
have names (usually), contain a sequence of statements, and return values, either explicitly or implicitly. We&amp;#39;ve already used several built-in functions. Today we will learn how to define our own.
Hello, Functions! We define a function using the def keyword:
&amp;gt;&amp;gt;&amp;gt; def greet(): ... print(&amp;#39;Hello&amp;#39;) ... (blank line tells Python shell you&amp;#39;re finished defining the function)
Once the function is defined, you can call it:</description></item><item><title>Getting Started</title><link>https://DrCS.codes/professional-python/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/getting-started/</guid><description>Getting Started These instructions are for installing and configuring the software used in this course. We use the Python.org distribution of Python, but if you already have another distribution, such as Anaconda, that will work fine as long as it includes Python &amp;gt;= 3.6, pip, and venv.
Install Python. Jump to the section matching the operating system you will be using to install Python:
macOS Windows Ubuntu/WSL Install and configure IntelliJ or PyCharm.</description></item><item><title>Introduction to Professional Python</title><link>https://DrCS.codes/professional-python/slides/intro-professional-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/intro-professional-python/</guid><description>Professional Python Faced-paced coverage of core Python. Assumes you know programming principles, not necessarily in Python Goes deeper into the Python language than a Python-based CS1 course The video for each lesson is about 30 minutes. Each lesson should take you 45-60 minutes if you pause the video and do the active reviews when asked. Each exercise should take you an hour or less. Projects should take you two to 10 hours.</description></item><item><title>Introduction to Python</title><link>https://DrCS.codes/professional-python/slides/intro-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/intro-python/</guid><description>Introduction to Computing with Python Computing Computing is any purposeful activity that marries the representation of some dynamic domain with the representation of some dynamic machine that provides theoretical, empirical or practical understanding of that domain or that machine.
– Isbell, et. al., (Re)Defining Computing Curricula by (Re)Defining Computing, SIGCSE Bulletin, Volume 41, Number 4, December 2009
Models, Languages, Machines Computing is fundamentally a modelling activity.
A model is a representation of some information, physical reality, or a virtual entity in a manner that can then be interpreted, manipulated, and transformed.</description></item><item><title>Lessons</title><link>https://DrCS.codes/professional-python/lessons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/lessons/</guid><description>Course Materials PfP: Python for Programmers PPP: Practical Programming: An Introduction to Computer Science Using Python 3.6, 3ed TP: Think Python, 2nd Edition, by Allen B. Downey Lessons # Slides Readings Exercises Projects Videos 1 Course Introduction PfP 1; TP 1
hw0
Install Python and PyCharm macOS
Install Python and PyCharm Windows 10/11
Install and Set up Git macOS
Install and Set up Git Windows 10/11
Introduction to Professional Python</description></item><item><title>Modules and Programs</title><link>https://DrCS.codes/professional-python/slides/modules-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/modules-programs/</guid><description>Modules and Programs Python Programs Python code organized in
modules, packages, and scripts. We&amp;#39;ve already used some modules, now we&amp;#39;ll learn what they are, how they&amp;#39;re orgainized in packages, and how to write Python programs that can be run on their own, not just entered in the Python command shell.
Importing Modules To import a module means to get names from the module into scope, or add them to a namespace.</description></item><item><title>MSA Boot Camp</title><link>https://DrCS.codes/professional-python/msabc2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/msabc2021/</guid><description>Go to the general MSA Bootcamp page.</description></item><item><title>Packages and Environments</title><link>https://DrCS.codes/professional-python/slides/packages-environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/packages-environments/</guid><description>Packages There are two meanings for &amp;ldquo;package&amp;rdquo; in Python:
Subdirectories into which modules are organized. See Python&amp;rsquo;s module documentation for details. A distribution of 3rd-party software, e.g., Python modules and supporting files, native code, etc. Here we discuss the second meaning.
Installing Packages The pip3 command downloads and installs packages.
Packages come from the Python Package Index by default. pip3 is quite flexible, allowing you to install from many kinds of sources.</description></item><item><title>Practice</title><link>https://DrCS.codes/professional-python/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/practice/</guid><description>Python Practice These programming problems provide practice applying what you have learned in the lessons. Many of these problems are also linked in the lesson listings for the appropriate course and indicate the knowledge required to complete the practice activity.
Exercises Exercises are designed to take no more than an hour to complete and give you practice using various features of Python.
BMI Books XML Exercise Compounding Table Data Manipulation Dates Dog Module Email Utilities Hex Quizzer Homework 0 Language Dictionary Matrix Operations Monty Hall String Fun Text Utilities Treating People as Objects Values and Variables Water Temperatures Projects Projects may take several days to complete and require you to solve design problems and learn material (such as third party libraries) that are not covered directly in the lessons.</description></item><item><title>Sequences</title><link>https://DrCS.codes/professional-python/slides/sequences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/sequences/</guid><description>Data Structures Built-in Data Structures Values can be collected in data structures:
Lists Tuples Dictionaries Sets See the Python documentation for complete details.
By the end of this lesson you will
know how to use lists and tuples Lists A list is an indexed sequence of Python objects.
Create a list with square brackets &amp;gt;&amp;gt;&amp;gt; boys = [&amp;#39;Stan&amp;#39;, &amp;#39;Kyle&amp;#39;, &amp;#39;Cartman&amp;#39;, &amp;#39;Kenny&amp;#39;] Create an empty list with empty square brackets or list() function &amp;gt;&amp;gt;&amp;gt; empty = [] &amp;gt;&amp;gt;&amp;gt; leer = list() Accessing List Elements Individual list elements are accessed by index.</description></item><item><title>Strings</title><link>https://DrCS.codes/professional-python/slides/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/strings/</guid><description>Strings Strings Three ways to define string literals:
with single quotes: &amp;#39;Ni!&amp;#39; double quotes: &amp;#34;Ni!&amp;#34; Or with triples of either single or double quotes, which creates a multi-line string:
&amp;gt;&amp;gt;&amp;gt; &amp;#34;&amp;#34;&amp;#34;I do HTML for them all, ... even made a home page for my dog.&amp;#34;&amp;#34;&amp;#34; &amp;#39;I do HTML for them all,\neven made a home page for my dog.&amp;#39; Strings Note that the REPL echoes the value with a \n to represent the newline character.</description></item><item><title>The SciPy Stack</title><link>https://DrCS.codes/professional-python/slides/scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/scipy/</guid><description>SciPy ** Data Analytics/Scientific Computing
Gaining insight from data:
Do instances fall into discernible groups? Which characteristics differentiate groups? Do some characteristics of instances predict other characteristics? Data are evidence. We seek predictive models and explanations.
** What is &amp;ldquo;data?&amp;rdquo;
First of all, data is the plural form of datum.
Data are measurements or assignments of values of attributes of instances of a class.
Grades of students in a course.</description></item><item><title>Tour of Python</title><link>https://DrCS.codes/professional-python/slides/tour-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/tour-python/</guid><description>Tour of Python In this lesson we&amp;rsquo;ll create two versions of a program that prints a table of corresponding Fahrenheit and Celsius temperatures. Along the way we&amp;rsquo;ll introduce
values and variables, control structures, functions, and Python scripts. Experienced programmers will be ready to begin writing Python programs after this lesson.
Astute readers who know C will recognize this example program from the first chapter of Kernighan and Ritchie&amp;rsquo;s classic The C Programming Language.</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/professional-python/slides/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/professional-python/slides/values-variables/</guid><description>Values and Variables Languages and Computation Every powerful language has three mechanisms for combining simple ideas to form more complex ideas:(SICP 1.1)
primitive expressions, which represent the simplest entities the language is concerned with, means of combination, by which compound elements are built from simpler ones, and means of abstraction, by which compound elements can be named and manipulated as units. By the end of this lession you will</description></item></channel></rss>