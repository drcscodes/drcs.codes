<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exercises on Dr. CS codes</title><link>https://DrCS.codes/python/exercises/</link><description>Recent content in Exercises on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/python/exercises/index.xml" rel="self" type="application/rss+xml"/><item><title>BMI</title><link>https://DrCS.codes/python/exercises/bmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/bmi/</guid><description>bmi Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings, converting values to different data types, doing arithmetic calculations, and testing modules with doctest. Problem Description You want to live a healthy life and use your computer to help you analyze your fitness and health.
Solution Description Create a module that provides convenience functions for converting imperial measures to metric equivalents, a function to calculate BMI, and two functions that tell you whether you are overweight or underweight according to government BMI standards.</description></item><item><title>Books XML Exercise</title><link>https://DrCS.codes/python/exercises/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/books/</guid><description>Books Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing XML files, and using Python data structures.
Problem Description You&amp;rsquo;re developing a book selling web site. You receive book data in XML format, like books.xml, and produce various reports about the books you sell.
Solution Description Write a module called books.py with the following functions:
def titles(books): &amp;#34;&amp;#34;&amp;#34;Extract the titles the books XML node and return them in a list.</description></item><item><title>Compounding Table</title><link>https://DrCS.codes/python/exercises/compounding-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/compounding-table/</guid><description>Compounding Table Introduction In this assignment you will practice:
writing scripts, using command-line arguments, converting strings to numbers, loops, simple arithmetic, and string formatting. Problem Description You are curious about the future value of an investment given an initial deposit and compounding periodic interest rate.
Solution Description Write a script called compounding_interest.py that takes three command line arguments, an initial deposit, a periodic interest rate, and a number of periods, and prints a table of the value of the deposit amount over time assuming compounding interest and no withdrawals.</description></item><item><title>Data Manipulation</title><link>https://DrCS.codes/python/exercises/data-manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/data-manipulation/</guid><description>Data Manipulation Introduction Drills are very short exercises designed to exercise the most basic building blocks of modules and programs.
Problem Description Data manipulation applications almost always include tranformation of data from one or more forms into other forms. In this drill you will practice transforming data stored in data structures into equivalent data stored in different data structures. Such transformations are often done to make the data easier to process for a particular application.</description></item><item><title>Data Util Module</title><link>https://DrCS.codes/python/exercises/python/data-util/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/data-util/</guid><description>data_util Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, manipulating strings and data structures, testing modules with doctest. Problem Description You need to manipulate Python data (and you&amp;rsquo;re not familiar with Python&amp;rsquo;s standard library).
Solution Description Create a module named data_util that implements the functions described below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>Dates</title><link>https://DrCS.codes/python/exercises/dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/dates/</guid><description>Dates Introduction In this assignment you will practice:
writing functions, documenting functions, doing basic operations with values and variables, and dealing with date-related data. Problem Description You want to get information about dates and days that require some calculation
Solution Description Write a module called dates (which you should save in a file called dates.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.</description></item><item><title>Dates</title><link>https://DrCS.codes/python/exercises/python/dates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/dates/</guid><description>Dates Introduction In this assignment you will practice:
writing functions, documenting functions, doing basic operations with values and variables, and dealing with date-related data. Problem Description Solution Description Write a module called dates (which you should save in a file called dates.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.6, Chapter 3 and summarized in our slides on Python functions, including the type contract using type hints and a docstring.</description></item><item><title>Dog Module</title><link>https://DrCS.codes/python/exercises/dog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/dog/</guid><description>Dog Module Write a module named dog which has a class named Dog with
an instance variable named name an instance variable named breed a constructor/initializer that takes name and breed parameters and uses them to initialize the instance variables a string representation that prints the name and breed of the dog, e.g., 'Chloe the Doberman' When your dog module is run as a script, it should use the first two command line arguments to your script to pass as the name and breed in the construction of an instance of Dog, then print the Dog instance using the print function.</description></item><item><title>Email Utilities</title><link>https://DrCS.codes/python/exercises/email-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/email-utils/</guid><description>Email Utilites In this exercise you will practice:
string manipulation, string methods, simple boolean expressions, and writing functions. Introduction Emails are of the form @. For example, bob@aol.com means there is a bob user account on the aol.com server. Email address are case insensitive, so Liger@SweetAnimals.com is the same as liger@sweetanimals.com. (This is a bit of a simplification, but fits our purpose here.)
Problem Description You need to extract user names and server names from email addresses, and compare two emails to determine if they are the same.</description></item><item><title>Email Utilities</title><link>https://DrCS.codes/python/exercises/python/email-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/email-utils/</guid><description>Email Utilites In this exercise you will practice:
string manipulation, string methods, simple boolean expressions, and writing functions. Introduction Emails are of the form @. For example, bob@aol.com means there is a bob user account on the aol.com server. Email address are case insensitive, so Liger@SweetAnimals.com is the same as liger@sweetanimals.com. (This is a bit of a simplification, but fits our purpose here.)
Problem Description You need to extract user names and server names from email addresses, and compare two emails to determine if they are the same.</description></item><item><title>Grades Module Exercise</title><link>https://DrCS.codes/python/exercises/python/grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/grades/</guid><description>Grades Module Introduction In this exercise you will practice
writing functions, using control structures, and manipulating data structures. Problem Description You need to process grades given as a list of lists, list[list[str]], where the first list is a header, and subsequent lists have a name followed by grades. For example:
super_grades = [ # First line is descriptive header. Subsequent lines hold data [&amp;#39;Student&amp;#39;, &amp;#39;Exam 1&amp;#39;, &amp;#39;Exam 2&amp;#39;, &amp;#39;Exam 3&amp;#39;], [&amp;#39;Thorny&amp;#39;, &amp;#39;100&amp;#39;, &amp;#39;90&amp;#39;, &amp;#39;80&amp;#39;], [&amp;#39;Mac&amp;#39;, &amp;#39;88&amp;#39;, &amp;#39;99&amp;#39;, &amp;#39;111&amp;#39;], [&amp;#39;Farva&amp;#39;, &amp;#39;45&amp;#39;, &amp;#39;56&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Rabbit&amp;#39;, &amp;#39;59&amp;#39;, &amp;#39;61&amp;#39;, &amp;#39;67&amp;#39;], [&amp;#39;Ursula&amp;#39;, &amp;#39;73&amp;#39;, &amp;#39;79&amp;#39;, &amp;#39;83&amp;#39;], [&amp;#39;Foster&amp;#39;, &amp;#39;89&amp;#39;, &amp;#39;97&amp;#39;, &amp;#39;101&amp;#39;] ] Write a module named grades with the following functions:</description></item><item><title>Grades Report Exercise</title><link>https://DrCS.codes/python/exercises/python/calc-grades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/calc-grades/</guid><description>Calc Grades Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to calculate final grades and get summary information on students in a class.
Solution Description Write a program called calc_grades.py that reads student item scores from a CSV file such as super-grades.csv, writes a new CSV file with the same data as the input file with the following additional columns:</description></item><item><title>Hangman Exercise</title><link>https://DrCS.codes/python/exercises/python/hangman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/hangman/</guid><description>Hangman Exercise Introduction In this exercise you will practice
writing Python programs and modules, writing programs and modules that use other modules, using control structures, validating user input and dealing with invalid input, using data structures and string processing, and writing interactive console programs. Problem Description You like word-guessing games.
Solution Description Write a Python program in a file named hangman.py that implements the classic Hangman game. Game play proceeds as follows:</description></item><item><title>Hex Quizzer</title><link>https://DrCS.codes/python/exercises/hexquizzer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/hexquizzer/</guid><description>Hex Quizzer Introduction In this assignment you will practice:
writing expressions and statements, using control structures, and working with types. Problem Description You want to get better at converting between decimal and hexadecimal numbers in your head.
Solution Description Write a program called hexquizzer.py that presents the user with a randomly chosen decimal number in the range [0, 15] and asks the user to provide the hexadecimal representation of that number.</description></item><item><title>Homework 0</title><link>https://DrCS.codes/python/exercises/hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/hw0/</guid><description>Homework 0 Introduction This assignment gets you started with the basic tools you will need to complete all of your homework projects. This project will
ensure that you have correctly installed Python 3 give you practice using a text editor to write Python programs, and give you practice running Python programs and using command line features. Problem Description You are a student who needs to install Python, configure it for command line use, and learn how to use a programmer&amp;rsquo;s text editor to create and edit Python source code.</description></item><item><title>Homework 0</title><link>https://DrCS.codes/python/exercises/python/hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/hw0/</guid><description>Homework 0 Introduction This assignment gets you started with the basic tools you will need to complete all of your homework projects. This project will
ensure that you have correctly installed Python 3 give you practice using a text editor to write Python programs, and give you practice running Python programs and using command line features. Problem Description You are a student who needs to install Python, configure it for command line use, and learn how to use a programmer&amp;rsquo;s text editor to create and edit Python source code.</description></item><item><title>Language Dictionary</title><link>https://DrCS.codes/python/exercises/language-dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/language-dictionary/</guid><description>Language Dictionary Introduction In this assignment you&amp;rsquo;ll practice
writing command-line tools, and working with dictionaries. Problem Description You want to quickly look up word translations in foreign languges.
Solution Description Write a script that takes two command line arguments, a word and a target language, and prints the word from the target language that corresponds to the word provided. Provide at least the following words, feel free to add your own:</description></item><item><title>Matrix Operations</title><link>https://DrCS.codes/python/exercises/matrixops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/matrixops/</guid><description>Matrix Operations Introduction In this assignment you will practice:
manipulating data structures, and translating a specification (e.g., a mathematical definition) into code. Problem Description You are writing an application that needs to perform basic operations on matrices.
Solution Description Write a module called matrixops (which you should save in a file called matrixops.py) with the following functions. For each function, be sure to the function design recipe in Practical Programming: An Introduction to Computer Science using Python 3.</description></item><item><title>Monty Hall</title><link>https://DrCS.codes/python/exercises/monty-hall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/monty-hall/</guid><description>Monty Hall In this exercise you will practice
random number generation, writing loops, writing selection structures, and simple arithmetic computations. Problem Description The Monty Hall Problem, based on a famous American TV game show, is a famous exercise in probabilistic thinking. You are shown three doors, behind one of which is a prize. You choose one of the three doors, and the host opens one of the other two doors after checking that it does not contain the prize.</description></item><item><title>String Fun</title><link>https://DrCS.codes/python/exercises/stringfun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/stringfun/</guid><description>String Fun Introduction In this assignment you will practice:
writing functions, documenting functions, and manipulating strings. Problem Description You enjoy word play and want to use Python
Solution Description Write a module called stringfun.py with the following functions:
def is_anagram(phrase1: str, phrase2: str) -&amp;gt; bool: &amp;#39;&amp;#39;&amp;#39;Returns True if phrase1 and phrase2 are anagrams. Phrases are anagrams if they contain the same letters (disregarding case) in the same numbers. &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;night&amp;#39;, &amp;#39;thing&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;young lady&amp;#39;, &amp;#39;An Old Guy&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;sassy mama&amp;#39;, &amp;#39;mama says&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; is_anagram(&amp;#39;sassy mama&amp;#39;, &amp;#39;mama say&amp;#39;) False &amp;#39;&amp;#39;&amp;#39; def is_palindrome(phrase: str) -&amp;gt; bool: &amp;#39;&amp;#39;&amp;#39;Returns True if phrase is a palindrome, ignoring case, whitespace and punctuation.</description></item><item><title>Student Emails</title><link>https://DrCS.codes/python/exercises/python/student-emails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/python/student-emails/</guid><description>Student Emails Introduction In this assignment you will practice writing Python command-line utilities, file I/O, processing CSV files, and processing Python data structures.
Problem Description You&amp;rsquo;re a teacher who needs to extract all the student emails from a CSV class roster downloaded from T-Square.
Solution Description Write a program that reads a CSV student roster file such as super-roster.csv and prints the email addresses to the console.
Sample Output $ python student_emails.</description></item><item><title>Text Utilities</title><link>https://DrCS.codes/python/exercises/textutil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/textutil/</guid><description>Text Utilities Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, doing arithmetic calculations, simple text processing, manipulating data structures and testing modules with doctest. Problem Description You need to do some text processing and decide to write a few utility functions to get started.
Solution Description Write a module named textutil with the functions specified below.
doctest The specification for each function is given as a docstring &amp;ndash; which you should include in your code &amp;ndash; and the types of arguments and return values are given using type hints documented in PEP 484 &amp;ndash; Type Hints.</description></item><item><title>Treating People as Objects</title><link>https://DrCS.codes/python/exercises/people-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/people-objects/</guid><description>Exercise: Treating People as Objects Introduction In this exercise you will practice defining and using classes, and performing simple manipulations of collections of objects.
Problem Description You need to view some data about people in various ways.
Solution Description The people.py module has starter code that creates Person objects in a list peeps. In the people.py file:
Write a Person class with:
an __init__ method that takes: a name (str), a birthdate (str) formatted in ISO 8601 format, a height in cm (int), a weight in kilograms (float), a __repr__ method that returns a str like &amp;lt;name, birthdate, height, weight&amp;gt; field, e.</description></item><item><title>Values and Variables</title><link>https://DrCS.codes/python/exercises/values-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/values-variables/</guid><description>Values and Variables Introduction In this short exercise you will create a series of values and assign them to variables to solidify your knowledge of values, variables, operators, and types.
Solution Description For each of the comments below, write the specified Python code. You may do this in the Python interactive shell or by creating a Python script that you run from the command line or import into an interactive Python shell (which runs the code).</description></item><item><title>Water Temperatures</title><link>https://DrCS.codes/python/exercises/water-temps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/exercises/water-temps/</guid><description>Water Temperatures Introduction This is a short exercise to give you some practice with NumPy and Pandas.
Solution Description In a Python module named water_temps.py, load the data contained in the file south-atlantic-water-temps.csv into a Pandas DataFrame named water_temps. Use the first column in the data file as the index (row keys) for the data frame.
Add a column to the water_temps DataFrame with the name AVG and whose values are the average temperature for each location.</description></item></channel></rss>