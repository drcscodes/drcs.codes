<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Dr. CS codes</title><link>https://DrCS.codes/python/projects/</link><description>Recent content in Projects on Dr. CS codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://DrCS.codes/python/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Company Scraper</title><link>https://DrCS.codes/python/projects/company-scraper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/company-scraper/</guid><description>Company Scraper Introduction In this project you will practice
web scraping, and writing CSV files. Problem Description You need to process general information about many companies from many sectors. The only place you can consistently find this information is on the web.
Solution Description Write a script called company_scraper.py that scrapes data from SEC.gov&amp;rsquo;s Edgar search engine to extract the name and address of each company in a list of companies contained in a text file, and saves the data in a single CSV file.</description></item><item><title>Fit</title><link>https://DrCS.codes/python/projects/fit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/fit/</guid><description>fit Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, doing arithmetic calculations, simple text processing, and testing modules with doctest. Problem Description You run a phyical fitness contest modeled after Navy Special Warfare&amp;rsquo;s physical screening test. You get data from contestants that includes times on a run, a swim, push-ups, pull-ups, and sit-ups and you must convert these times and numbers to a single score that can be used to rank fitness contest entries.</description></item><item><title>Generate Sentence</title><link>https://DrCS.codes/python/projects/generate-sentence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/generate-sentence/</guid><description>generate_sentence Module Introduction In this assignment you&amp;rsquo;ll practice
writing functions and modules, using lists and dictionaries, selective logic (if statements), simple text processing, and testing modules with doctest. Problem Description You&amp;rsquo;re interested in natural language processing and, having learned about context free grammars for natural languages, you want to experiment with sentence generation.
Solution Description Write a module named generate_sentence with functions that can be used to generate noun phrases, verb phrases and sentences in subject-verb-object form.</description></item><item><title>Markov Chains</title><link>https://DrCS.codes/python/projects/markov-chains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/markov-chains/</guid><description>Markov Chains Introduction In this assignment you&amp;rsquo;ll practice
writing classes and modules, simple text processing, and basic numerical computing issues in Python. Problem Description You&amp;rsquo;re interested in natural language processing, and in the problem of identifying the source of a text.
Solution Description Write a module named source.py with a class named SourceModel whose constructor takes a name for a source, and a courpus object of type TextIOWrapper (such as a file object &amp;ndash; see io module) and builds a first-order Markov model of the transitions between letters in the source.</description></item><item><title>Movies Part 1 - ETL</title><link>https://DrCS.codes/python/projects/movies/movies-etl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/movies/movies-etl/</guid><description>Movies Part 1 - ETL Introduction In this assignment you&amp;rsquo;ll create and execute an ETL pipeline for movie data.
General Instructions This is an individual assignment.
Since this project counts for an exam grade you may not collaborate with your classmates. You may discuss general concepts related to the assignment, such as how to use the Python libraries in general terms, but you may not discuss any specifics of this assignment with anyone other than the course instructor or the TAs.</description></item><item><title>Movies Part 2 - Analysis</title><link>https://DrCS.codes/python/projects/movies/movies-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/movies/movies-analysis/</guid><description>Movies Part 2 - Analysis Introduction In this assignment you&amp;rsquo;ll do some basic analysis of the data you created with your ETL pipeline from Part 1.
General Instructions This is an individual assignment.
Since this project counts for an exam grade you may not collaborate with your classmates. You may discuss general concepts related to the assignment, such as how to use the Python libraries in general terms, but you may not discuss any specifics of this assignment with anyone other than the course instructor or the TAs.</description></item><item><title>Playlists</title><link>https://DrCS.codes/python/projects/playlists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/playlists/</guid><description>Playlists Introduction In this assignment you will practice data transfer techniques such as
reading CSV files, using data structures, creating JSON files, and using os tools. Problem Description You have a list of songs in a comma-separated values file and you want to publish it as a playlist to a site that supports the JSPF JSON format for sharing playlists.
Solution Description Write a Python program in a file named csv2jspf.</description></item><item><title>Students</title><link>https://DrCS.codes/python/projects/students/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/students/</guid><description>Students Introduction In this assignment you&amp;rsquo;ll practice
writing classes, using datetime.date objects in Python, using objects, and transforming data comprised of objects. Problem Description You are writing a web application to manage a database of students.
Solution Description Write a module named students with the classes and functions specified below.
Required Classes and Functions Classes Student
Write a class called Student with the following instance variables:
id: str &amp;ndash; 9-digit student ID login: str &amp;ndash; login ID first_name: str last_name: str birth_date: datetime.</description></item><item><title>Tides</title><link>https://DrCS.codes/python/projects/tides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/tides/</guid><description>Tides Introduction In this assignment you will practice writing Python command-line utilities, obtaining data, file I/O, processing CSV files, and using Python&amp;rsquo;s datetime module.
Problem Description You are a scuba diving instructor who plans dive trips to West Palm Beach, FL that include dives at the world famous Blue Heron Bridge. The Blue Heron Bridge is a shore dive that is best done at slack high tide, so planning is essential.</description></item><item><title>Word Histogram</title><link>https://DrCS.codes/python/projects/word-hist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://DrCS.codes/python/projects/word-hist/</guid><description>Word Histogram Introduction In this homework you will practice
data structures, control structures, functional programming, and using modules that you learn on your own from documentation. Problem Descrtiption You&amp;rsquo;re a curious linguist with computer hacking skills and you want to see if Zipf&amp;rsquo;s Law holds for texts contained in files lying around on your disk.
Solution Description Write a Python module in word_hist.py that includes the following functions. You should copy these function declarations and docstrings verbatim to ensure that we can successfully autograde your submission.</description></item></channel></rss>